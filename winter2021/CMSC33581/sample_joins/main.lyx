#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran-CompSoc
\begin_preamble
\usepackage{adjustbox}
\usepackage{pgfplots}
\usetikzlibrary{
    patterns,
    chains,
    backgrounds,
    calc,
    shadings,
    shapes.arrows,
    arrows,
    shapes.symbols,
    shadows,
    positioning,
    decorations.markings,
    backgrounds,
    arrows.meta,
    external
}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Sampling through Joins
\end_layout

\begin_layout Author
Maksim Levental, Greg Pauloski
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section*
Abstract
\end_layout

\begin_layout Standard
In most relational databases, joins 
\begin_inset Formula $\mathtt{JOIN}\text{\left(R_{1},R_{2}\right)}$
\end_inset

 between two tables 
\begin_inset Formula $R_{1}$
\end_inset

 and 
\begin_inset Formula $R_{2}$
\end_inset

 are expensive, especially on large tables (owing to the join having maximum
 cardinality 
\begin_inset Formula $\lvert R_{1}\rvert\times\lvert R_{2}\rvert$
\end_inset

).
 Often joins are used for the purposes of computing aggregations (e.g.
 
\family typewriter
SUM
\family default
, 
\family typewriter
AVG
\family default
, 
\family typewriter
COUNT
\family default
).
 One potential optimization is to 
\family typewriter
SAMPLE
\family default
 the operand tables.
 Unfortunately, in general, 
\family typewriter
SAMPLE
\family default
 doesn’t commute with 
\family typewriter
JOIN
\family default
.
 We aim to study the regimes under which the operations do commute and what
 are the tradeoffs when they don’t.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Joins are a fundamental operator in the relational algebra entailed by E.F.
 Codd's relational model of data 
\begin_inset CommandInset citation
LatexCommand cite
key "codd_relational"
literal "false"

\end_inset

; they're used to bridge seemingly unrelated entities and analyze implied
 relationships.
 By definition, joins are a subset of the cartesian product of some relations
 and therefore incur compute cost proportional to that product (i.e.
 exponential in the number of relations to be joined).
 In many instances, joins are employed as a preprocessing step in order
 to compute an aggregation function over resulting data, such as a sum,
 an average, or a count.
 In such instances it is often acceptable, and occasionally even preferable,
 to construct estimates (along with error guarantees) of the functions based
 on a sample of the entire join; one obvious advantage is in the reduction
 on the execution time of the aggregation function.
 Naturally this prompts the question of whether the operand relations in
 the join can themselves sampled (as opposed to ultimately sampling the
 join) and whether the join need be constructed at all.
 Alternatively, when relations aren't materialized, 
\shape italic
online
\shape default
 aggregation, using online sampling, can be performed using similar such
 sampling techniques.
\end_layout

\begin_layout Standard
We therefore proceed to study when sampling commutes with joins by reviewing
 a sampling
\begin_inset Foot
status open

\begin_layout Plain Layout
Pun intended.
\end_layout

\end_inset

 of the literature on such techniques and then performing some experiments
 to verify/validate the most distinctive techniques.
 The rest of the report is organized as follows: section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:background"

\end_inset

 briefly discusses the necessary background on sampling and joins, section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Techniques"

\end_inset

 reviews several techniques, culminating in a taxonomy that categorizes
 said techniques according to constraints and performance (see tbl.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tbl:techniques"

\end_inset

), section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Experiments"

\end_inset

 describes and reviews our experiments, and finally section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Conclusion"

\end_inset

 concludes with some conjecture about promising research directions.
\end_layout

\begin_layout Section
Background
\begin_inset CommandInset label
LatexCommand label
name "subsec:background"

\end_inset


\end_layout

\begin_layout Subsection
Joins
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 be 
\shape italic
relations
\shape default
 on respective
\shape italic
 attributes 
\begin_inset Formula $\left(A,B\right),\left(B,C\right)$
\end_inset

.
 
\shape default
The 
\shape italic
natural join
\shape default
 
\begin_inset Formula $J\coloneqq R_{1}\bowtie R_{2}$
\end_inset

 is defined as the set of all pairs of tuples in 
\begin_inset Formula $R_{1}$
\end_inset

 and 
\begin_inset Formula $R_{2}$
\end_inset

 that are equal on their common attribute 
\begin_inset Formula $A$
\end_inset


\begin_inset Formula 
\[
J\coloneqq\left\{ \left(t_{1},t_{2}\right)\mid t_{1}.B=t_{2}.B\wedge t_{1}\in R_{1},t_{2}\in R_{2}\right\} 
\]

\end_inset

The extension to 
\begin_inset Formula $K$
\end_inset

 relations and multiple common attributes is the natural conjunction.
 Note that if 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 have no common attributes then the join condition is vacuously true and
 
\begin_inset Formula $R_{1}\bowtie R_{2}\equiv R_{1}\times R_{2}$
\end_inset

, the cartesian product
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sometimes called the 
\shape italic
cross join
\shape default
 of
\shape italic
 
\shape default

\begin_inset Formula $R_{1},R_{2}$
\end_inset

.
\end_layout

\end_inset

 of 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

.
 We will also have need of joins between relations that have a conditional
 relationship between some columns; define a 
\begin_inset Formula $\theta$
\end_inset

-join 
\begin_inset Formula $R_{1}\bowtie_{A\theta B}R_{2}$
\end_inset

 of relations 
\begin_inset Formula $R(A,\dots),R(B,\dots)$
\end_inset

 on attributes 
\begin_inset Formula $A,B$
\end_inset

 with respect to some binary operator 
\begin_inset Formula $\left\{ <,≤,=,≠,>,≥\right\} $
\end_inset

 as all tuples in 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 such that 
\begin_inset Formula $a\theta b$
\end_inset

 evaluates to true, for 
\begin_inset Formula $a\in A,b\in B$
\end_inset

 .
 The particular case of 
\begin_inset Formula $\theta$
\end_inset

 being the equality operator 
\begin_inset Formula $=$
\end_inset

 is called an 
\shape italic
equijoin
\shape default
.
\end_layout

\begin_layout Standard
We can also model 
\begin_inset Formula $K$
\end_inset

-joins (joins between 
\begin_inset Formula $K$
\end_inset

 relations) as a hypergraph
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A generalization of a graph in which an edge can join any number of vertices.
 
\end_layout

\end_inset

 on the union of all attributes in all 
\begin_inset Formula $R_{i}$
\end_inset

; let 
\begin_inset Formula $\mathcal{A}\left(R_{i}\right)$
\end_inset

 be the attributes of 
\begin_inset Formula $R_{i}$
\end_inset

 and 
\begin_inset Formula 
\[
\mathcal{A}\coloneqq\bigcup_{i=1}^{K}\mathcal{A}\left(R_{i}\right)
\]

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename chainjoin.png
	lyxscale 10
	width 50line%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Chain join 
\begin_inset CommandInset label
LatexCommand label
name "fig:chainjoin"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename starjoin.png
	lyxscale 10
	width 50line%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Acyclic (or tree/star) join 
\begin_inset CommandInset label
LatexCommand label
name "fig:starjoin"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cyclicjoin.png
	lyxscale 10
	width 50line%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Cyclic join 
\begin_inset CommandInset label
LatexCommand label
name "fig:cyclicjoin"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Join for relations 
\begin_inset Formula $R_{1},R_{2},R_{3},R_{4},R_{5}$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "JoinsRevisited"
literal "false"

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Join-for-relations"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Then a join is a set of vertices corresponding to individual attributes
 and a hyperedge contains/connects all the attributes of an individual relations
hip.
 Using this model we can represent three distinct classes of joins:
\end_layout

\begin_layout Itemize

\shape italic
Chain join
\shape default
: joins where relations can easily be ordered such that consecutive relations
 share one attribute (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:chainjoin"

\end_inset

).
\end_layout

\begin_layout Itemize

\shape italic
Acyclic join
\shape default
: also known as a tree or star join, these are joins where there is no cycle
 on the join hypergraph (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:starjoin"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Itemize

\shape italic
Cyclic join
\shape default
: joins where there is a cycle on the join hypergraph (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cyclicjoin"

\end_inset

).
\end_layout

\begin_layout Subsection
Sampling
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $R$
\end_inset

 be a relation over some attributes with cardinality 
\begin_inset Formula $n\coloneqq\left|R\right|$
\end_inset

.
 For 
\begin_inset Formula $0\leq f\leq1$
\end_inset

, 
\begin_inset Formula $\mathtt{SAMPLE}\left(R,f\right)$
\end_inset

 is defined to be a uniformly random sample 
\begin_inset Formula $S$
\end_inset

 of tuples in 
\begin_inset Formula $R$
\end_inset

 such that 
\begin_inset Formula $\left|S\right|=f\cdot n$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Taking floor or ceiling when 
\begin_inset Formula $f\cdot n$
\end_inset

 is not an integer.
\end_layout

\end_inset

.
 A priori the sampling semantics are unspecified; indeed, there are three
 distinct interpretations of sampling: 
\end_layout

\begin_layout Itemize

\shape italic
Sampling with replacement 
\shape default
(WR): sample 
\begin_inset Formula $f\cdot n$
\end_inset

 tuples uniformly and independently with replacement.
 The result is bag (multiset) of tuples.
\end_layout

\begin_layout Itemize

\shape italic
Sampling without replacement 
\shape default
(WoR): sample 
\begin_inset Formula $f\cdot n$
\end_inset

 
\shape italic
distinct
\shape default
 tuples, i.e.
 each successive tuple is sampled from the remaining set of tuples.
\end_layout

\begin_layout Itemize

\shape italic
Coin flip sampling
\shape default
 (CF): for each tuple in 
\begin_inset Formula $R$
\end_inset

, choose that tuple with probability 
\begin_inset Formula $f$
\end_inset

 (and reject with probability 
\begin_inset Formula $1-f$
\end_inset

).
 This essentially produces a draw from a binomial distribution 
\begin_inset Formula $B(n,f)$
\end_inset

 where heads correspond to chosen tuples.
\end_layout

\begin_layout Standard
Note we can transform amongst these interpretations for various input, output
 pairs 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Furthermore, sampling can either be 
\shape italic
correlated
\shape default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Inclusion of a member of the sample implies, with some probability, inclusion
 of some other member.
\end_layout

\end_inset

 or 
\shape italic
uncorrelated
\shape default
; we will see that correlated samples lead to higher error rates than uncorrelat
ed samples (see sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Universe-sampling"

\end_inset

).

\shape italic
 
\shape default
We are also particularly interested in 
\shape italic
streaming
\shape default
 or 
\shape italic
sequential sampling
\shape default
, which is the act of sampling a relation as it streams by, for example
 in instances when the relation is produced iteratively by some long running
 process.
 We will also have need of 
\shape italic
weighted sampling
\shape default
, wherein elements are sampled with probability proportional to some weight
 assigned to those elements.
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Let 
\begin_inset Formula $J_{t}\left(R_{2}\right)\coloneqq\left\{ t'\in R_{2}\mid t'.A=t.A\right\} $
\end_inset

 be the set of tuples in 
\begin_inset Formula $R_{2}$
\end_inset

 that join with 
\begin_inset Formula $t\in R_{1}$
\end_inset

 and, furthermore, define 
\begin_inset Formula $t\bowtie R_{2}\coloneqq t\bowtie J_{t}\left(R_{2}\right)$
\end_inset

 i.e.
 the set of tuples in 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 contributed by matching against 
\begin_inset Formula $t$
\end_inset

.
 Thus, almost tautologically 
\begin_inset Formula 
\[
\left|t\bowtie R_{2}\right|=\left|t\bowtie J_{t}\left(R_{2}\right)\right|=\left|J_{t}\left(R_{2}\right)\right|=m_{2}\left(t.A\right)
\]

\end_inset

Similarly define 
\begin_inset Formula $J_{t}\left(R_{1}\right),R_{1}\bowtie t$
\end_inset

 for 
\begin_inset Formula $t\in R_{2}$
\end_inset

 and observe 
\begin_inset Formula $\left|J_{t}\left(R_{1}\right)\right|=m_{1}\left(t.A\right)$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The join sampling problem
\end_layout

\begin_layout Standard
First we make some elementary observations.
 Let 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 be two relations of cardinalities 
\begin_inset Formula $n_{1},n_{2}$
\end_inset

 respectively and 
\begin_inset Formula $J\coloneqq R_{1}\bowtie R_{2}$
\end_inset

,
\shape italic
 
\shape default
with 
\shape italic

\begin_inset Formula $n\coloneqq\left|J\right|$
\end_inset

,
\shape default
 and further suppose 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 only have common attribute 
\begin_inset Formula $A\subseteq D$
\end_inset

 for some domain 
\begin_inset Formula $D$
\end_inset

.
 For all 
\begin_inset Formula $v\in D$
\end_inset

, let 
\begin_inset Formula $m_{1}\left(v\right),m_{2}\left(v\right)$
\end_inset

 be the frequencies (i.e.
 quantities) of tuples in 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

, respectively, for which attribute 
\begin_inset Formula $A$
\end_inset

 takes on value 
\begin_inset Formula $v$
\end_inset


\begin_inset Formula 
\[
m_{i}\left(v\right)\coloneqq\left|\left\{ t\mid v\in D\wedge t\in R_{i}\wedge t.A=v\right\} \right|
\]

\end_inset

for 
\begin_inset Formula $i=1,2$
\end_inset

.
 Note that for 
\begin_inset Formula $v\in D\backslash A$
\end_inset

, we have 
\begin_inset Formula $m_{i}\left(v\right)=0$
\end_inset

.
 Then
\begin_inset Formula 
\[
\sum_{v\in D}m_{i}(v)=n_{i}
\]

\end_inset

 That is to say, projecting from 
\begin_inset Formula $R_{i}$
\end_inset

 to 
\begin_inset Formula $A$
\end_inset

 partitions the relation 
\begin_inset Formula $R_{i}$
\end_inset

.
 Clearly 
\begin_inset Formula 
\[
n=\sum_{v\in D}m_{1}(v)\cdot m_{2}(v)
\]

\end_inset

since each tuple in 
\begin_inset Formula $R_{1}$
\end_inset

 that contributes to 
\begin_inset Formula $m_{1}(v)$
\end_inset

 joins with 
\begin_inset Formula $m_{2}(v)$
\end_inset

 tuples in 
\begin_inset Formula $R_{2}$
\end_inset

 and vice-versa.
 
\end_layout

\begin_layout Standard
Consider sampling from relations 
\begin_inset Formula $R_{1}\left(A,B\right),R_{2}\left(B,C\right)$
\end_inset

 defined as such
\begin_inset Formula 
\[
\begin{aligned}R_{1} & \coloneqq\left\{ \left(a_{1},b_{0}\right),\left(a_{2},b_{1}\right),\left(a_{2},b_{2}\right),\dots,\left(a_{2},b_{K}\right)\right\} \\
R_{2} & \coloneqq\left\{ \left(a_{2},c_{0}\right),\left(a_{1},c_{1}\right),\left(a_{1},c_{2}\right),\dots,\left(a_{1},c_{K}\right)\right\} 
\end{aligned}
\]

\end_inset

Observe that 
\begin_inset Formula $m_{1}\left(a_{1}\right)=m_{2}\text{\left(a_{2}\right)}=K$
\end_inset

 and thus 
\begin_inset Formula 
\begin{align*}
\left|R_{1}\bowtie R_{2}\right| & =\sum_{v\in D}m_{1}(v)\cdot m_{2}(v)\\
 & =m_{1}(a_{1})\cdot m_{2}(a_{1})+m_{1}(a_{2})\cdot m_{2}(a_{2})\\
 & =K+K=2K
\end{align*}

\end_inset

We observe that there is 
\shape italic
skew 
\shape default
between the relations in the different attribute values for which the join
 occurs.
 Suppose we wish to construct 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

; we should expect that half of the tuples 
\begin_inset Formula $t$
\end_inset

 in such a sample will have 
\begin_inset Formula $t.A=a_{1}$
\end_inset

 and the other half will have 
\begin_inset Formula $t.A=a_{2}$
\end_inset

.
 Unfortunately, if we attempt to sample each of 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 independently and then perform the join we are unlikely to get the correct
 result: the probability that a uniform sample from 
\begin_inset Formula $R_{1}$
\end_inset

 contains the tuple 
\begin_inset Formula $\left(a_{1},b_{0}\right)$
\end_inset

 is 
\begin_inset Formula $1/(K+1)$
\end_inset

 and similarly for 
\begin_inset Formula $\left(a_{2},c_{0}\right)\in R_{2}$
\end_inset

.
 Indeed, with high probability
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $\left(1-\frac{1}{k+1}\right)\cdot\left(1-\frac{1}{k+1}\right)=1-O\left(\frac{1}{k}\right)$
\end_inset

.
\end_layout

\end_inset

 
\begin_inset Formula 
\[
\mathtt{SAMPLE}\left(R_{1},f\right)\bowtie\mathtt{SAMPLE}\left(R_{2},f\right)=\emptyset
\]

\end_inset


\end_layout

\begin_layout Standard
This demonstrates that the crux of the 
\shape italic
join sampling problem
\shape default
 is that, for 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

, each tuple 
\begin_inset Formula $t_{1}\in R_{1}$
\end_inset

 is sampled in direct proportion to the quantity of tuples 
\begin_inset Formula $t_{2}\in R_{2}$
\end_inset

 that join with it, and vice-versa.
 To wit:
\begin_inset Formula 
\begin{multline}
R_{1}\bowtie R_{2}=\left\{ \left(a_{1},b_{0},c_{1}\right),\dots,\left(a_{1},b_{0},c_{K}\right),\right.\\
\left.\left(a_{2},b_{1},c_{0}\right),\dots,\left(a_{2},b_{K},c_{0}\right)\right\} \label{eq:correlatedsample}
\end{multline}

\end_inset

Thus, 
\begin_inset Formula $\left(a_{1},b_{0}\right)\in R_{1}$
\end_inset

 is sampled from 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 with probability 
\begin_inset Formula $1/2$
\end_inset

 while the remaining tuples in 
\begin_inset Formula $R_{1}$
\end_inset

 are sampled each with probability 
\begin_inset Formula $1/2K$
\end_inset

.
 That is to say, 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

 corresponds to a weighted sample of 
\begin_inset Formula $R_{1}$
\end_inset

 rather than a uniformly random sample.
 Thus, it is in general, impossible to construct a uniform random sample
 of 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 by first uniformly sampling each of 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

:
\end_layout

\begin_layout Theorem
Given uniform random samples 
\begin_inset Formula $S_{i}\coloneqq\mathtt{SAMPLE}\left(R_{i},f_{i}\right)$
\end_inset

 with 
\begin_inset Formula $f_{i}<1$
\end_inset

 it is impossible to construct a uniform random 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

 from 
\begin_inset Formula $S_{1},S_{2}$
\end_inset

 for any 
\begin_inset Formula $f>0$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "thm:Given-uniform-random"

\end_inset


\end_layout

\begin_layout Standard
\noindent
In fact, even if we bound the skew we cannot hope to achieve such a sample
 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset

:
\end_layout

\begin_layout Theorem
Given a common attribute value 
\begin_inset Formula $v$
\end_inset

 for relations 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 and attribute frequencies 
\begin_inset Formula $m_{1}\left(v\right),m_{2}\left(v\right)$
\end_inset

, it is impossible to construct a uniformly random 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

 from 
\begin_inset Formula $S_{1},S_{2}$
\end_inset

 (as defined in thm.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:Given-uniform-random"
plural "false"
caps "false"
noprefix "false"

\end_inset

) unless
\shape up

\begin_inset Formula 
\[
\begin{array}{c}
f_{1}\geq\frac{f\cdot m_{2}}{2}\mbox{ and }f_{2}\geq\frac{f\cdot m_{1}}{2}\mbox{ for }f\leq\frac{1}{\max\left\{ m_{1},m_{2}\right\} }\\
\\
\mbox{ or }\\
\\
f_{1}\geq\frac{1}{2}\mbox{ and }f_{2}\geq\frac{1}{2}\mbox{ for }f\leq\frac{1}{\min\left\{ m_{1},m_{2}\right\} }
\end{array}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Therefore, in general, we cannot commute 
\begin_inset Formula $\mathtt{SAMPLE}$
\end_inset

 with 
\begin_inset Formula $\bowtie$
\end_inset

.
 However, this does not preclude the possibility of 
\shape italic
non-uniformly
\shape default
 random sampling each of 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 in order to construct a uniformly random sample of 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

.
 We shall see that this will be the primary path to resolution of the join
 sampling problem.
\end_layout

\begin_layout Subsection
Online aggregation
\end_layout

\begin_layout Standard
Consider a SQL query of the form
\end_layout

\begin_layout LyX-Code
SELECT 
\begin_inset Formula $g$
\end_inset

, AGG
\begin_inset Formula $\left(g\left(R_{1},R_{2},\dots,R_{K}\right)\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
FROM 
\begin_inset Formula $R_{1},R_{2},\dots,R_{K}$
\end_inset


\end_layout

\begin_layout LyX-Code
WHERE 
\begin_inset Formula $\theta\left(R_{1},R_{2},\dots,R_{K}\right)$
\end_inset

 AND 
\begin_inset Formula $\sigma_{\varphi}\left(R_{1},R_{2},\dots,R_{K}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
GROUP BY 
\begin_inset Formula $g$
\end_inset


\end_layout

\begin_layout Standard
where 
\family typewriter

\begin_inset Formula $\theta$
\end_inset

 
\family default
is the aforementioned join condition operator, 
\family typewriter

\begin_inset Formula $g\left(R_{1},R_{2},\dots,R_{K}\right)$
\end_inset

 
\family default
is an expression that involves any attributes of the relations 
\begin_inset Formula $R_{1},R_{2},\dots,R_{K}$
\end_inset

, 
\begin_inset Formula $\mathtt{AGG}\in\left\{ \mathtt{SUM},\mathtt{AVG},\mathtt{COUNT},\dots\right\} $
\end_inset

, and 
\begin_inset Formula $\sigma_{\varphi}$
\end_inset

 selects tuples that satisfy the condition 
\begin_inset Formula $\varphi$
\end_inset

.
 An effective online aggregation algorithm iteratively produces an estimator
 
\begin_inset Formula $\hat{Y}_{n}$
\end_inset

 for 
\family typewriter
AGG
\family default

\begin_inset Formula $\left(g\right)$
\end_inset

, at every iteration 
\begin_inset Formula $n$
\end_inset

, along with confidence intervals (CIs)
\begin_inset Formula 
\[
I_{n}\coloneqq\left[\hat{Y}_{n}-\epsilon_{n},\hat{Y}_{n}+\epsilon_{n}\right]
\]

\end_inset

where 
\begin_inset Formula $\epsilon_{n}$
\end_inset

 (called the 
\shape italic
precision
\shape default
, or 
\shape italic
margin of error)
\shape default
 is defined as a function of 
\begin_inset Formula $\alpha$
\end_inset

, the 
\shape italic
confidence level
\shape default
,
\shape italic
 
\shape default
by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P\left(\left|\hat{Y}_{n}-\mathtt{AGG}\left(g\right)\right|\leq\epsilon_{n}\right)\geq\alpha
\]

\end_inset

For example, if estimators are derived by using the Central Limit Theorem,
 then 
\begin_inset Formula 
\[
\epsilon_{n}\coloneqq\frac{z_{p}\hat{\sigma}_{n}}{\sqrt{n}}
\]

\end_inset

where 
\begin_inset Formula $z_{p}$
\end_inset

 is the 
\shape italic
z-score
\shape default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The unique number such that 
\begin_inset Formula $P\left(-z_{p}\leq Z\leq z_{p}\right)=p$
\end_inset

 for 
\begin_inset Formula $Z\sim\mathcal{N}\left(0,1\right)$
\end_inset

 where 
\begin_inset Formula $\mathcal{N}\left(0,1\right)$
\end_inset

 is the standard Normal distribution.
\end_layout

\end_inset

 corresponding to a 
\begin_inset Formula $100p\%$
\end_inset

 confidence level.
 Typically one of 
\begin_inset Formula $\epsilon_{n},\alpha$
\end_inset

 (but not both) is specified by the user and the algorithm reports the other
 as it proceeds; the user terminates the query when the unspecified parameter
 reaches a desired value.
 This early termination, given the users error preferences, is the chief
 advantage of online aggregation over evaluating 
\begin_inset Formula $\mathtt{AGG}\left(g\left(R_{1},R_{2},\dots,R_{K}\right)\right)$
\end_inset

 on the join in its entirety.
\end_layout

\begin_layout Section
Techniques
\begin_inset CommandInset label
LatexCommand label
name "sec:Techniques"

\end_inset


\end_layout

\begin_layout Standard
We consider the problem of constructing 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie\cdots\bowtie R_{K},f\right)$
\end_inset

 by means of sampling the operand relations 
\begin_inset Formula $R_{i}$
\end_inset

.
 We often restrict ourselves to joins over one common attribute 
\begin_inset Formula $A$
\end_inset

 but discuss necessary extensions to multi-attribute joins.
 In the proceeding we partition techniques according to how much information
 is at our disposal for each of the relations 
\begin_inset Formula $R_{i}$
\end_inset

:
\end_layout

\begin_layout Itemize

\shape italic
Frequencies
\shape default
: complete frequencies (for each possible value) for all relevant attributes.
\end_layout

\begin_layout Itemize

\shape italic
Partial frequencies
\shape default
: frequencies for only the high frequency values; this is a useful category
 since it is in fact these values that distort the ultimate sample.
 
\end_layout

\begin_layout Itemize

\shape italic
Frequency upper bounds
\shape default
: upper bounds on the frequencies of values of relevant attributes; these
 are useful as a proxy for complete or partial frequencies.
 
\end_layout

\begin_layout Itemize

\shape italic
Index
\shape default
: a means to perform indexed access (as opposed to sequential) on tuples
 of a relation according to values of some attribute; crucially we require
 the ability to also evaluate predicates on said attribute.
\end_layout

\begin_layout Standard
Thus, we produce a classification of techniques according to whether we
 have statistics (full or partial) and indices for both 
\begin_inset Formula $R_{i}$
\end_inset

, neither, or something in between (see tbl.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tbl:techniques"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Techniques
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tbl:techniques"

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Strategy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $R_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $R_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Complexity
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Olken sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "olken1993random"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index and freqs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e.g.
 
\begin_inset Formula $O\left(M\left|R_{1}\right|/\left|R_{1}\bowtie R_{2}\right|\right)$
\end_inset

 per tuple in result 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stream sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index and freqs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $O\left(1\right)$
\end_inset

 per tuple in result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Group sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequencies
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e.g.
 
\begin_inset Formula $O\left(\alpha_{1}\left|R_{1}\bowtie R_{2}\right|\right)$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency-partition sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End-biased freqs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e.g.
 
\begin_inset Formula $O\left(\alpha_{2}\left|R_{1}\bowtie R_{2}\right|\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index 
\begin_inset Formula $R_{i}^{hi}$
\end_inset

 and end-biased freqs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e.g.
 
\begin_inset Formula $O\left(\alpha_{3}\left|R_{1}\bowtie R_{2}\right|\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universe sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "universesampling"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
—
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e.g.
 
\begin_inset Formula $O\left(\max\left(\left|R_{1}\right|,\left|R_{2}\right|\right)\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MaxRand join 
\begin_inset CommandInset citation
LatexCommand cite
key "corrsampling"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index and freqs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index and freqs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $O\left(\left|D\right|\left|K\right|+\sum_{i=1}^{K}N\left(1+\log\left(\frac{\left|R_{i}\right|}{N}\right)\right)\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ripple join
\begin_inset CommandInset citation
LatexCommand cite
key "ripplejoin"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $O\left(\sqrt{\left|R_{i}\right|/d}\right)$
\end_inset

 per tuple in result 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hash ripple join
\begin_inset CommandInset citation
LatexCommand cite
key "ripplejoin"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $O\left(\sqrt{\left|R_{i}\right|/d}\right)$
\end_inset

 per tuple in result 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wander join
\begin_inset CommandInset citation
LatexCommand cite
key "wanderjoin"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $O\left(1/2^{K-1}\right)$
\end_inset

 per tuple in result for 
\begin_inset Formula $K$
\end_inset

 relations
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Upper bound join 
\begin_inset CommandInset citation
LatexCommand cite
key "agmbound"
literal "false"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index and upper bounds
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1/W\left(t\right)$
\end_inset

 for 
\begin_inset Formula $t\in R_{i}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset

Several of the described techniques make use of more general sampling algorithms
 such as reservoir sampling and rejection sampling.
 Consult appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Stream-sampling-algorithms"

\end_inset

 for brief descriptions.
 We relegate techniques that are derivations on a theme (and whose pseudo-code
 descriptions are involved) to the appendix as well (see appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Technique-implementations"

\end_inset

).
 
\end_layout

\begin_layout Subsection
Olken sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Olken-sample"

\end_inset


\end_layout

\begin_layout Standard
Olken sampling only applies in the best possible case; for example, when
 we have random access on 
\begin_inset Formula $R_{1}$
\end_inset

 and 
\begin_inset Formula $R_{2}$
\end_inset

 and full frequency statistics for 
\begin_inset Formula $R_{2}$
\end_inset

.
 In this case we use rejection sampling (see sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Rejection-sampling"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to produce tuples in 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

 by sampling from tuples 
\begin_inset Formula $R_{1}$
\end_inset

 in direct proportion to their frequency in 
\begin_inset Formula $R_{2}$
\end_inset

 (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:olkensample"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 With 
\begin_inset Formula $M\coloneqq\max_{v\in D}m_{2}\left(v\right)$
\end_inset

, for 
\begin_inset Formula $v\in A\subseteq D$
\end_inset

, Olken sampling produces a WR sample of 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 and requires 
\begin_inset Formula $Mn_{1}/n$
\end_inset

 iterations for each output tuple 
\begin_inset CommandInset citation
LatexCommand cite
key "ChaudhuriRandomSampling"
literal "false"

\end_inset

, where 
\begin_inset Formula $n\coloneqq\left|R_{1}\bowtie R_{2}\right|$
\end_inset

 and 
\begin_inset Formula $n_{1}\coloneqq\left|R_{1}\right|$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Olken Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{1}\left(A,\dots\right),R_{2}\left(A,\dots\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $M\coloneqq\max_{v\in D}m_{2}\left(v\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $k\coloneqq\left\lceil f\cdot\left|R_{1}\bowtie R_{2}\right|\right\rceil $
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S$
\end_inset

, a 
\begin_inset Formula $\mathtt{SAMPLE}_{WR}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Init: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S[\cdots]\coloneqq0$
\end_inset


\end_layout

\begin_layout LyX-Code
  // sample 
\begin_inset Formula $t_{1}$
\end_inset

 from 
\begin_inset Formula $R_{1}$
\end_inset

 uniformly
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $t_{1}\sim U(R_{1})$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  // sample matching rows in 
\begin_inset Formula $R_{2}$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $t_{2}\sim U\left(\left\{ t\mid t\in R_{2}\wedge t.A=t_{1}.A\right\} \right)$
\end_inset

  
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

: 
\end_layout

\begin_layout LyX-Code
    // accept in proportion with the
\end_layout

\begin_layout LyX-Code
    // frequency 
\begin_inset Formula $m_{2}\left(t_{1}.A\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
    while 
\begin_inset Formula $m_{2}\left(t_{2}.A\right)<U\left(0,M\right)$
\end_inset

: 
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $t_{1}\sim U(R_{1})$
\end_inset

 
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $t_{2}\sim U\left(\left\{ t\mid t\in R_{2}\wedge t.A=t_{1}.A\right\} \right)$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:olkensample"

\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $S[i]\coloneqq\left(t_{1},t_{2}\right)$
\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Stream sampling
\end_layout

\begin_layout Standard
On the occasion where we have only streaming access to 
\begin_inset Formula $R_{1}$
\end_inset

 we can use weighted stream sampling (see sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Weighted-streaming-sampling"
plural "false"
caps "false"
noprefix "false"

\end_inset

), with weights defined as 
\begin_inset Formula $w(t)\coloneqq m_{2}\left(t_{1}.A\right)$
\end_inset

, and join each such tuple with a randomly selected tuple from 
\begin_inset Formula $R_{1}$
\end_inset

.
 See alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:streamsample"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Note that we do constant work per included tuple.
\end_layout

\begin_layout Subsubsection
Group sampling
\end_layout

\begin_layout Standard
In the case where we further reduce our information to only statistics (no
 index) for 
\begin_inset Formula $R_{2}$
\end_inset

, we can weighted sample tuples 
\begin_inset Formula $t_{1}$
\end_inset

 from 
\begin_inset Formula $R_{1}$
\end_inset

 and then sample from 
\begin_inset Formula $t_{1}\bowtie R_{2}$
\end_inset

.
 In effect performing a 
\family typewriter
GROUP BY
\family default
 (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:groupsample"

\end_inset

).
 We perform the second sampling using unweighted sampling with replacement.
 The cost of this strategy depends on the cardinalities 
\begin_inset Formula $\left|t_{1}\bowtie R_{2}\right|$
\end_inset

:
\begin_inset Formula 
\[
\alpha_{1}\coloneqq r\times\frac{\sum_{v\in D}m_{1}\left(v\right)m_{2}\left(v\right)^{2}}{\left(\sum_{v\in D}m_{1}\left(v\right)m_{2}\left(v\right)\right)^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Note that this strategy compares very favorably to naive sampling
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Constructing the entire join and then using unweighted sampling on the result.
\end_layout

\end_inset

 (the only other possible strategy for this set of circumstances).
\end_layout

\begin_layout Subsubsection
Frequency-partition sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Frequency-partition-sample"

\end_inset


\end_layout

\begin_layout Standard
Suppose we now only have an end-biased histogram
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Frequencies for all values that occur 
\begin_inset Formula $l$
\end_inset

 or more times.
\end_layout

\end_inset

 for 
\begin_inset Formula $R_{2}$
\end_inset

.
 We can then logically partition 
\begin_inset Formula $R_{2}$
\end_inset

 into those tuples with high-frequency 
\begin_inset Formula $D^{hi}$
\end_inset

 values and their complement 
\begin_inset Formula $D^{lo}$
\end_inset

 (tuples with low-frequency values) and notice that it's the former set
 of tuples that are responsible for the skew that is the core of the sampling
 problem (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Frequency-Partition-Sample"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 These 
\begin_inset Formula $D^{hi}$
\end_inset

 values function to inflate the join.
 Therefore we can improve efficiency by taking a hybrid approach: by employing
 group sample strategy on 
\begin_inset Formula $D^{hi}$
\end_inset

 
\begin_inset Foot
status open

\begin_layout Plain Layout
Thereby saving having to compute the full join for the bulk of the tuples.
\end_layout

\end_inset

 and naively sampling on 
\begin_inset Formula $D^{lo}$
\end_inset

.
 Working to our advantage is the fact that there cannot be too many high-frequen
cy values and that it is precisely this set of values for which maintaining
 the frequencies is cheap 
\begin_inset Foot
status open

\begin_layout Plain Layout
Since, tautologically, they are observed frequently and can be readily sketched.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The remaining issue is how to determine the allocation of the sample to
 each group: take 
\begin_inset Formula $k\coloneqq\left\lceil f\cdot\left|R_{1}\bowtie R_{2}\right|\right\rceil $
\end_inset

 from each subset and then cull in each subset in order to reduce the total
 quantity 
\begin_inset Foot
status open

\begin_layout Plain Layout
By CF sampling with 
\begin_inset Formula $p$
\end_inset

 being equal to the relative fractions of tuples in each subset
\end_layout

\end_inset

.
 The primary advantage of this algorithm is that it only requires an end-biased
 histogram for 
\begin_inset Formula $R_{2}$
\end_inset

.
 The cost incurred by the frequency partition sample strategy is 
\begin_inset Formula $O\left(\alpha_{2}\left|R_{1}\bowtie R_{2}\right|\right)$
\end_inset

 where 
\begin_inset Formula 
\[
\alpha_{2}\coloneqq\frac{\sum_{v\in D^{lo}}m_{1}\left(v\right)m_{2}\left(v\right)+r\times\frac{\sum_{v\in D^{hi}}m_{1}\left(v\right)m_{2}\left(v\right)^{2}}{\sum_{v\in D^{hi}}m_{1}\left(v\right)m_{2}\left(v\right)}}{\sum_{v\in D}m_{1}\left(v\right)m_{2}\left(v\right)}
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Index sampling
\end_layout

\begin_layout Standard
If an index is available for the high-frequency values 
\begin_inset Formula $R_{2}^{hi}$
\end_inset

, in addition to just the frequencies themselves, then a more efficient
 version of frequency partition sample is possible: we can save having to
 compute the full join since
\begin_inset Formula 
\begin{multline*}
\left(S_{1}\cup R_{1}^{lo}\right)\bowtie R_{2}\equiv\left(S_{1}\cup R_{1}^{lo}\right)\bowtie\left(R_{2}^{lo}\cup R_{2}^{hi}\right)\\
\equiv\cancel{\left(S_{1}\bowtie R_{2}^{hi}\right)}\cup\left(S_{1}\bowtie R_{2}^{lo}\right)\cup\left(R_{1}^{lo}\bowtie R_{2}\right)
\end{multline*}

\end_inset

and instead uses the same idea as in stream sample
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $t_{1}\in S_{1}\wedge t_{2}\sim U\left(\left\{ t\mid t\in R_{2}^{hi}\wedge t.A=t_{1}.A\right\} \right)$
\end_inset


\end_layout

\end_inset

 to select a random tuple in 
\begin_inset Formula $R_{2}^{hi}$
\end_inset

 per tuple in 
\begin_inset Formula $S_{1}$
\end_inset

.
 The cost incurred by the Index sample strategy is 
\begin_inset Formula $O\left(\alpha_{3}\left|R_{1}\bowtie R_{2}\right|\right)$
\end_inset

 where
\begin_inset Formula 
\[
\alpha_{3}\coloneqq\frac{\sum_{v\in D^{lo}}m_{1}\left(v\right)m_{2}\left(v\right)+r}{\sum_{v\in D}m_{1}\left(v\right)m_{2}\left(v\right)}
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Count sampling
\end_layout

\begin_layout Standard
Strictly speaking an index for 
\begin_inset Formula $R_{2}^{hi}$
\end_inset

 isn't necessary and can be replaced by a scan across 
\begin_inset Formula $R_{2}^{hi}$
\end_inset

 instead.
 See alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:count-sample"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Universe sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Universe-sampling"

\end_inset


\end_layout

\begin_layout Standard
Given an attribute 
\begin_inset Formula $A$
\end_inset

 and a perfect
\begin_inset Foot
status open

\begin_layout Plain Layout
Collision free.
\end_layout

\end_inset

 hash function 
\begin_inset Formula $h:A\rightarrow\left[0,1\right]$
\end_inset

 we can compute 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset

 by hashing 
\begin_inset CommandInset citation
LatexCommand cite
key "universesampling"
literal "false"

\end_inset

 tuples 
\begin_inset Formula $t_{1},t_{2}\in R_{1},R_{2}$
\end_inset

 and rejecting those that fall outside of 
\begin_inset Formula $\left[0,f\right]$
\end_inset

 (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:universesampling"

\end_inset

).
 
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Universe Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{1}\left(A,\dots\right),R_{2}\left(A,\dots\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  sample rate 
\begin_inset Formula $f$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  hash function 
\begin_inset Formula $h$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S$
\end_inset

, a 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $S_{1},S_{2}\coloneqq[\cdots],[\cdots]$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  // stream 
\begin_inset Formula $R_{1}$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:universesampling"

\end_inset


\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $R_{1}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{1}=\mathtt{next}\left(R_{1}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    if 
\begin_inset Formula $h\left(t_{1}.A\right)<f$
\end_inset

: 
\begin_inset Formula $S_{1}\coloneqq S_{1}\cup\left\{ t_{1}.A\right\} $
\end_inset


\end_layout

\begin_layout LyX-Code
  // stream 
\begin_inset Formula $R_{2}$
\end_inset


\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $R_{2}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{2}=\mathtt{next}\left(R_{2}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    if 
\begin_inset Formula $h\left(t_{2}.A\right)<f$
\end_inset

: 
\begin_inset Formula $S_{2}\coloneqq S_{2}\cup\left\{ t_{2}\right\} $
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S\coloneqq S_{1}\bowtie S_{2}$
\end_inset


\end_layout

\end_inset

This guarantees that when 
\begin_inset Formula $t_{1}\in R_{1}$
\end_inset

 is sampled, all matching tuples 
\begin_inset Formula $t_{2}\in R_{2}$
\end_inset

 are also sampled since 
\begin_inset Formula 
\[
t_{1}.A=t_{2}.A\iff h\left(t_{1}.A\right)=h\left(t_{2}.A\right)
\]

\end_inset

Hence, universe sampling produces a true uniformly random sample of 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 (in expectation) since each tuples appears with probability 
\begin_inset Formula $f$
\end_inset

.
 Unfortunately, the samples are correlated: if 
\begin_inset Formula 
\[
t_{1}.A=t_{2}.A=t_{1}'.A=t_{2}'.A
\]

\end_inset

then 
\begin_inset Formula 
\begin{multline*}
\left(t_{1},t_{2}\right)\in\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)\iff\\
\left(t_{1}',t_{2}'\right)\in\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)
\end{multline*}

\end_inset

This can lead to poor performance for approximate queries when the frequencies
 of attributes are highly concentrated: consider sampling from relations
 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 each with 
\begin_inset Formula $n$
\end_inset

 identical tuples.
 The variance of the estimator 
\begin_inset CommandInset citation
LatexCommand cite
key "universeinaccuarate"
literal "false"

\end_inset

 for the join size
\begin_inset Formula 
\[
\frac{\left|S_{1}\bowtie S_{2}\right|}{f}\approx\left|R_{1}\bowtie R_{2}\right|
\]

\end_inset

is 
\begin_inset Formula $n^{4}/f$
\end_inset

 while the variance of the same estimator given uniform sampling is 
\begin_inset Formula $n^{2}/f^{2}$
\end_inset

, which is much lower when 
\begin_inset Formula $n$
\end_inset

 is large.
\end_layout

\begin_layout Subsection
Correlation based sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Correlation-based-sampling"

\end_inset


\end_layout

\begin_layout Standard
Olken sampling and its extensions produce uncorrelated samples by enforcing
 (through various means) that a tuple in 
\begin_inset Formula $R_{1}$
\end_inset

 is joined with only one tuple in 
\begin_inset Formula $R_{2}$
\end_inset

; this leads to 
\shape italic
sample inflation
\shape default
.
 Correlated sampling techniques, such as universe sampling, perform better
 with respect to sample inflation but suffer from poorer error estimates
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Universe-sampling"

\end_inset

).
 Correlation based sampling 
\begin_inset CommandInset citation
LatexCommand cite
key "corrsampling"
literal "false"

\end_inset

 aims to mitigate the issues of correlated sampling, while preserving the
 benefits, by maximizing 
\shape italic
join randomness
\shape default
.
 The join randomness of a sampling technique is the number of different
 possible samples that can be drawn by the technique given a fixed sample
 size (and given frequencies of attributes).
 
\end_layout

\begin_layout Standard
To motivate join randomness, consider naive sampling from 
\begin_inset Formula $K$
\end_inset

 relations with common attribute 
\begin_inset Formula $A\subseteq D$
\end_inset

 that takes on 
\begin_inset Formula $\left|D\right|$
\end_inset

 distinct values.
 The maximum number of such samples depends combinatorially on the number
 drawn from each relation:
\begin_inset Formula 
\[
\#\text{Samplings}=\prod_{j=1}^{\left|D\right|}\prod_{k=1}^{K}C_{m_{s_{k}}\left(a_{j}\right)}^{m_{k}\left(a_{j}\right)}
\]

\end_inset

where 
\begin_inset Formula $m_{k}\left(a_{j}\right)$
\end_inset

 are frequencies of value 
\begin_inset Formula $a_{j}$
\end_inset

 in 
\begin_inset Formula $R_{k}$
\end_inset

 and 
\begin_inset Formula $m_{s_{k}}\left(a_{j}\right)$
\end_inset

 are the allocations of 
\begin_inset Formula $a_{j}$
\end_inset

 for sample 
\begin_inset Formula $S_{k}$
\end_inset

 of 
\begin_inset Formula $R_{k}$
\end_inset

 (
\begin_inset Formula $C_{b}^{a}$
\end_inset

 is the binomial coefficient).
 For example, suppose 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

 include an attribute 
\begin_inset Formula $A$
\end_inset

 with two distinct values 
\begin_inset Formula $\left\{ a_{1},a_{2}\right\} $
\end_inset

 and with frequencies 
\begin_inset Formula 
\begin{align*}
m_{1}(a_{1})=m_{2}(a_{1}) & =10\\
m_{1}(a_{2})=m_{2}(a_{2}) & =20
\end{align*}

\end_inset

If we sample both relations, thereby producing 
\begin_inset Formula $S_{1}$
\end_inset

 and 
\begin_inset Formula $S_{2}$
\end_inset

, and fix the sample size (the number sampled from either 
\begin_inset Formula $S_{1}$
\end_inset

 or 
\begin_inset Formula $S_{2}$
\end_inset

) to 
\begin_inset Formula $M=30$
\end_inset

 then the number of possible samples is 
\begin_inset Formula 
\[
C_{m_{s_{1}}\left(a_{1}\right)}^{10}\times C_{m_{s_{2}}\left(a_{1}\right)}^{10}\times C_{m_{s_{1}}\left(a_{2}\right)}^{20}\times C_{m_{s_{2}}\left(a_{2}\right)}^{20}
\]

\end_inset

For various allocations of we see order of magnitude differences in the
 number of possible samplings:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row bottomspace="1ex">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m_{s_{1}}\left(a_{1}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m_{s_{2}}\left(a_{1}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m_{s_{1}}\left(a_{2}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m_{s_{2}}\left(a_{2}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
# Samplings
\end_layout

\end_inset
</cell>
</row>
<row topspace="1ex">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.2\times10^{15}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.3\times10^{14}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5.3\times10^{13}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.5\times10^{11}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
MaxRand join
\end_layout

\begin_layout Standard
\noindent
In general, the allocation that maximizes the number of possible samplings,
 per distinct value 
\begin_inset Formula $a_{j}$
\end_inset

 of attribute 
\begin_inset Formula $A$
\end_inset

, for sample 
\begin_inset Formula $S_{k}$
\end_inset

, for a given total sample size 
\begin_inset Formula $M$
\end_inset

, is 
\begin_inset CommandInset citation
LatexCommand cite
key "corrsampling"
literal "false"

\end_inset

:
\begin_inset Formula 
\begin{equation}
m_{s_{k}}\left(a_{j}\right)\coloneqq\operatorname{round}\text{\left(\frac{M\cdot m_{k}\left(a_{j}\right)}{\sum_{j=1}^{\left|D\right|}\sum_{k=1}^{K}m_{k}\left(a_{j}\right)}\right)}\label{eq:maxrandjoin}
\end{equation}

\end_inset

The MaxRand join algorithm uses this result to produce a maximally random
 join (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:maxrandjoin"

\end_inset

).
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MaxRand Join
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  relations 
\begin_inset Formula $R_{1}\left(A,\dots\right),\dots,R_{K}\left(A,\dots\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $m_{s_{k}}\left(a_{j}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S$
\end_inset

, a 
\begin_inset Formula $\mathtt{SAMPLE}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S[\cdots]=[]$
\end_inset

   
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $K$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    // stream
\end_layout

\begin_layout LyX-Code
    while 
\begin_inset Formula $R_{i}:$
\end_inset


\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $S[i]\coloneqq[\cdots]$
\end_inset


\end_layout

\begin_layout LyX-Code
      for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $\left|D\right|$
\end_inset

:
\end_layout

\begin_layout LyX-Code
        // independent reservoirs 
\end_layout

\begin_layout LyX-Code
        // for each 
\begin_inset Formula $a_{j}$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $S[i]\coloneqq S[i]\cup$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:maxrandjoin"

\end_inset


\end_layout

\begin_layout LyX-Code
             
\begin_inset Formula $\mathtt{ReservoirSample}\left(R_{i},m_{s_{k}}\left(a_{j}\right),a_{j}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S\coloneqq S[1]\bowtie\cdots\bowtie S[K]$
\end_inset


\end_layout

\end_inset

The total cost of MaxRand join is the cost of constructing 
\begin_inset Formula $m_{s_{k}}\left(a_{j}\right)$
\end_inset

 for 
\begin_inset Formula $k=1,\dots,K$
\end_inset

 and 
\begin_inset Formula $j=1,\dots,\left|D\right|$
\end_inset

, plus the cost of reservoir sampling each 
\begin_inset Formula $R_{i}$
\end_inset

; let 
\begin_inset Formula 
\[
N\coloneqq\max_{k,j}m_{s_{k}}\left(a_{j}\right)
\]

\end_inset

then the total cost is 
\begin_inset Formula 
\[
O\left(\left|D\right|\left|K\right|+\sum_{i=1}^{K}N\left(1+\log\left(\frac{\left|R_{i}\right|}{N}\right)\right)\right)
\]

\end_inset


\end_layout

\begin_layout Subsection
Ripple join
\end_layout

\begin_layout Standard
Ripple join 
\begin_inset CommandInset citation
LatexCommand cite
key "ripplejoin"
literal "false"

\end_inset

 belongs to a class of techniques that address the online aggregation problem.
 Thus, ripple join isn't an operand sampling scheme per se but a streaming
 join algorithm that, by virtue of building the join incrementally, produces
 a sample of 
\begin_inset Formula $R_{1}\bowtie\cdots\bowtie R_{K}$
\end_inset

.
 As the full join is approached, running estimates for various aggregations
 converge.
 
\end_layout

\begin_layout Standard
In order to understand ripple join we first need to understand the 
\shape italic
streaming nested loops algorithm
\shape default
 
\begin_inset CommandInset citation
LatexCommand cite
key "onlineaggregation"
literal "false"

\end_inset

.
 For example, for relations 
\begin_inset Formula $R_{1},R_{2}$
\end_inset

, with 
\begin_inset Formula $\left|R_{1}\right|<\left|R_{2}\right|$
\end_inset

, streaming nested loops first samples 
\begin_inset Formula $t_{1}\in R_{1}$
\end_inset

 and then 
\begin_inset Formula $R_{2}$
\end_inset

 is scanned in search of tuples that satisfy the join condition.
 Once all such tuples are discovered, the running estimate of the aggregation
 function is updated.
 Note that for conventional batch processing, a query optimizer would select
 
\begin_inset Formula $R_{1}$
\end_inset

 as the outer relation, while for streaming processing the reverse is preferable
\begin_inset Foot
status open

\begin_layout Plain Layout
Such that running estimates can be updated more frequently.
\end_layout

\end_inset

.
 In this case, if 
\begin_inset Formula $\left|R_{1}\right|$
\end_inset

 is nontrivial, then wait times for updates can be excessively long.
 Furthermore, if the aggregation is 
\begin_inset Quotes eld
\end_inset

insensitive
\begin_inset Quotes erd
\end_inset

 to the attribute values in 
\begin_inset Formula $R_{1}$
\end_inset

 then this leads to poor convergence
\begin_inset Foot
status open

\begin_layout Plain Layout
Since subsequent tuples from 
\begin_inset Formula $R_{1}$
\end_inset

 don't contribute new 
\begin_inset Quotes eld
\end_inset

statistical information
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset

.
 Such an example is 
\begin_inset Formula 
\[
\mathtt{SELECT\,AVG}\left(R_{2}.A+R_{1}.B/10000000\right)\,\mathtt{FROM\,}R_{1},R_{2}
\]

\end_inset

where 
\begin_inset Formula $R_{1}.B/10000000$
\end_inset

 most likely does not move the average on each sampled tuple.
\begin_inset Float figure
wide true
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ripplejoin.png
	lyxscale 25
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ripple Join for 
\begin_inset Formula $R_{1}\bowtie R_{2}$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "wanderjoin"
literal "false"

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Ripple-Join-for"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Ripple join address both of these issues by adaptively choosing which is
 the inner relation and which is the outer relation in the nested loops
 (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ripple-Join-for"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and the 
\shape italic
aspect
\shape default
 
\shape italic
ratios 
\begin_inset Formula $\text{\ensuremath{\beta_{1},}\ensuremath{\beta_{2}}}$
\end_inset


\shape default
 of the join.
 The aspect ratios 
\shape italic

\begin_inset Formula $\text{\ensuremath{\beta_{1},}\ensuremath{\beta_{2}}}$
\end_inset


\shape default
 determine how many times 
\begin_inset Formula $R_{2}$
\end_inset

 is sampled per outer loop and how many tuples are selected from 
\begin_inset Formula $R_{1}$
\end_inset

 per inner loop.
 
\end_layout

\begin_layout Standard
Using ripple join we can estimate various aggregations by calculating them
 over the 
\begin_inset Quotes eld
\end_inset

current
\begin_inset Quotes erd
\end_inset

 set of sampled tuples.
 Unsurprisingly, the variance of these estimates depends on the aspect ratios
 
\begin_inset Formula $\beta_{i}$
\end_inset

:
\begin_inset Formula 
\[
\hat{\sigma}^{2}\coloneqq\sum_{k=1}^{K}\frac{\hat{d}\left(k\right)}{\beta_{k}}
\]

\end_inset

where 
\begin_inset Formula $\hat{d}\left(k\right)$
\end_inset

 is an estimator for a term 
\begin_inset Formula $d\left(k\right)$
\end_inset

 that takes a particular form for each aggregation 
\family typewriter
SUM
\family default
,
\family typewriter
 COUNT
\family default
, or
\family typewriter
 AVG
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "wanderjoin"
literal "false"

\end_inset

.
 Thus, the confidence intervals can be minimized subject to an upper bound
 
\begin_inset Formula $c$
\end_inset

 on the product of the aspect ratios
\begin_inset Foot
status open

\begin_layout Plain Layout
Since the product of the aspect ratios is the number of matches computed
 and hence proportional to total I/O.
\end_layout

\end_inset

:
\begin_inset Formula 
\begin{align}
\mbox{minimize } & \sum_{k=1}^{K}\frac{\hat{d}\left(k\right)}{\beta_{k}}\nonumber \\
\mbox{such that } & \prod_{k=1}^{K}\beta_{k}\leq c\label{eq:cost}\\
 & 1\leq\beta_{k}\leq\left|R_{i}\right|\nonumber \\
 & \beta_{k}\in\mathbb{N}\nonumber 
\end{align}

\end_inset

This is a non-linear integer programming problem which is, in general, NP-hard
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
By reduction from minimum vertex cover.
\end_layout

\end_inset

.
 Ripple join solves a relaxation such that
\begin_inset Formula 
\[
\beta_{k}^{*}=\left(\frac{c}{\prod_{k=1}^{K}\hat{d}\left(k\right)}\right)^{1/K}\hat{d}\left(k\right)
\]

\end_inset

where 
\begin_inset Formula $\hat{d}\left(k\right)$
\end_inset

 is the estimate from the previous iteration.
 
\end_layout

\begin_layout Subsubsection
Hash ripple join
\end_layout

\begin_layout Standard
In the case of an equijoin we can use hashing to amortize lookup of previously
 matched tuples; when a new tuple is fetched from either relation it must
 be combined with all previously matched tuples from the other relation.
 If previously sampled tuples are hashed on the join column then it is possible
 to select them efficiently.
 This implies a reduction in the cost (eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cost"
plural "false"
caps "false"
noprefix "false"

\end_inset

) of the 
\begin_inset Formula $n$
\end_inset

sampling steps to only 
\begin_inset Formula $\sum_{k=1}^{K}\beta_{k}$
\end_inset

 and therefore the optimal aspect ratios are
\begin_inset Formula 
\[
\beta_{k}^{*}=\frac{c\sqrt{\hat{d}\left(k\right)}}{\sum_{j=1}^{K}\sqrt{\hat{d}\left(j\right)}}
\]

\end_inset


\end_layout

\begin_layout Subsection
Wander join
\end_layout

\begin_layout Standard
Wander join
\begin_inset CommandInset citation
LatexCommand cite
key "wanderjoin"
literal "false"

\end_inset

, like ripple join, is a solution to the online aggregation problem.
 The key idea is to model a join over 
\begin_inset Formula $K$
\end_inset

 relations as a 
\shape italic
join graph
\begin_inset Foot
status open

\begin_layout Plain Layout
Distinct from the join hypergraph.
\end_layout

\end_inset

 
\shape default
i.e.
 a 
\begin_inset Formula $K$
\end_inset

-partite graph where each partition corresponds to a relation and edges
 between vertices indicate a match on the join condition.
 Once such a model is adopted one can then further model streaming joins
 as random walks in the graph.
 Such random walks can then be used to construct unbiased estimators of
 various aggregations.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename wanderjoin.png
	lyxscale 10
	width 50line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wander join for 
\begin_inset Formula $R_{1}\left(A,B\right)\bowtie R_{2}\left(B,C\right)\bowtie R_{3}\left(C,D\right)$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "wanderjoin"
literal "false"

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:wanderjoin"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $R_{1}\left(A,B\right),R_{2}\left(B,C\right),R_{3}\left(C,D\right)$
\end_inset

 be the relations of interest, 
\begin_inset Formula 
\[
J\coloneqq R_{1}\left(A,B\right)\bowtie R_{2}\left(B,C\right)\bowtie R_{3}\left(C,D\right)
\]

\end_inset

be the join of interest.
 Also, let 
\begin_inset Formula $d_{i+1}\left(t_{i}\right)$
\end_inset

 be the number neighbors of 
\begin_inset Formula $t_{i}$
\end_inset

 in relation 
\begin_inset Formula $R_{i+1}$
\end_inset

 i.e the number of tuples in 
\begin_inset Formula $R_{i+1}$
\end_inset

 that join with 
\begin_inset Formula $t_{i}$
\end_inset

.
 A random walk (or path) 
\begin_inset Formula $\gamma$
\end_inset

 can be sampled from 
\begin_inset Formula $J$
\end_inset

 by picking a tuple (vertex) 
\begin_inset Formula $t_{1}\in R_{1}$
\end_inset

 uniformly at random and then uniformly at random selecting tuples 
\begin_inset Formula $t_{2}\in R_{2},t_{3}\in R_{3}$
\end_inset

 such that 
\begin_inset Formula $t_{2}.B=t_{1}.B\,\wedge\,t_{3}.C=t_{2}.C$
\end_inset

 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:wanderjoin"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Then, given an expression 
\begin_inset Formula $g\left(R_{1},R_{2},R_{3}\right)$
\end_inset

, we can construct a one point estimate of 
\begin_inset Formula $\mathtt{SUM}\left(g\left(R_{1},R_{2},R_{3}\right)\right)$
\end_inset

, for example, by
\begin_inset Formula 
\[
X_{\gamma}\coloneqq\frac{g\left(\gamma\right)}{p\left(\gamma\right)}\quad p\left(\gamma\right)\coloneqq\frac{1}{\left|R_{1}\right|}\frac{1}{d_{2}\left(t_{1}\right)}\frac{1}{d_{3}\left(t_{2}\right)}
\]

\end_inset

where 
\begin_inset Formula $p\left(\gamma\right)$
\end_inset

 is the probability of sampling 
\begin_inset Formula $\gamma$
\end_inset

.
 This estimator is unbiased 
\begin_inset CommandInset citation
LatexCommand cite
key "horvitzestimator"
literal "false"

\end_inset

 and hence the average of many such estimators (over paths 
\begin_inset Formula $\Gamma$
\end_inset

) is also unbiased: 
\begin_inset Formula 
\[
\hat{\mu}_{\Gamma}\coloneqq\frac{1}{\left|\Gamma\right|}\sum_{\gamma\in\Gamma}X_{\gamma}\Rightarrow E\left[\hat{\mu}_{\Gamma}\right]=\mathtt{SUM}\left(g\left(R_{1},R_{2},R_{3}\right)\right)
\]

\end_inset

The variance 
\begin_inset Formula $\hat{\sigma}_{\Gamma}^{2}$
\end_inset

 of 
\begin_inset Formula $\hat{\mu}_{\Gamma}$
\end_inset

 is
\begin_inset Formula 
\[
\hat{\sigma}_{\Gamma}^{2}\coloneqq\frac{1}{\left|\Gamma\right|-1}\sum_{\gamma\in\Gamma}\left(X_{\gamma}-\hat{\mu}_{\Gamma}\right)^{2}
\]

\end_inset

Furthermore, the 
\shape italic
walk plan, 
\shape default
i.e.
 the order of the relations sampled, can be optimized, in terms of estimator
 variance; by the 
\shape italic
law of total variance
\shape default

\begin_inset Formula 
\[
\text{Var}\left(\frac{1}{\left|\Gamma\right|}\sum_{\gamma\in\Gamma}X_{\gamma}\right)=\frac{\textrm{Var}\left[X_{\gamma}\right]E\left[T\right]}{t}
\]

\end_inset

where 
\begin_inset Formula $T$
\end_inset

 is the running time of a single random walk and 
\begin_inset Formula $t$
\end_inset

 is the total time taken to sample 
\begin_inset Formula $\Gamma$
\end_inset

.
 Thus, by estimating both 
\begin_inset Formula $\text{Var}\left[X_{\gamma}\right]$
\end_inset

 and 
\begin_inset Formula $E\left[T\right]$
\end_inset

 from the walks themselves, we can choose the walk plan that minimizes the
 estimator variance.
\end_layout

\begin_layout Subsubsection
Wander join for cyclic and acyclic joins
\end_layout

\begin_layout Standard
As described, wander join applies to chain joins (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:chainjoin"

\end_inset

).
 The algorithm can be extended to include merely acyclic joins (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:starjoin"
plural "false"
caps "false"
noprefix "false"

\end_inset

) by incorporating 
\begin_inset Quotes eld
\end_inset

jumps
\begin_inset Quotes erd
\end_inset

 into the random walk.
 For example, consider 
\begin_inset Formula 
\begin{multline*}
R_{1}\left(A,B\right)\bowtie R_{2}\left(B,C,D\right)\bowtie R_{3}\left(C,E\right)\\
\bowtie R_{4}\left(D,F\right)\bowtie R_{5}\left(F,G\right)
\end{multline*}

\end_inset

and fix a 
\shape italic
walk order
\shape default
 
\begin_inset Formula $R_{1},R_{2},R_{3},R_{4},R_{5}$
\end_inset

.
 On sampling 
\begin_inset Formula $t_{3}\in R_{3}$
\end_inset

 we 
\begin_inset Quotes eld
\end_inset

jump back
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Formula $t_{2}\in R_{2}$
\end_inset

 and sample 
\begin_inset Formula $t_{4}\in R_{4}$
\end_inset

 and so on.
 Given relations 
\begin_inset Formula $R_{1},\dots,R_{K}$
\end_inset

 and a walk order 
\begin_inset Formula $\left(R_{\lambda\left(1\right)},\dots,R_{\lambda\left(K\right)}\right)$
\end_inset

, define 
\begin_inset Formula $R_{\eta\left(i\right)}$
\end_inset

 to be the relation corresponding to the 
\begin_inset Quotes eld
\end_inset

parent
\begin_inset Quotes erd
\end_inset

 of 
\begin_inset Formula $R_{\lambda\left(i\right)}$
\end_inset

.
 Then for the path 
\begin_inset Formula $\gamma\coloneqq\left(t_{\lambda\left(1\right)},\dots,t_{\lambda\left(K\right)}\right)$
\end_inset

 
\begin_inset Formula 
\[
p\left(\gamma\right)=\frac{1}{\left|R_{\lambda\left(1\right)}\right|}\prod_{k=2}^{K}\frac{1}{d_{\lambda\left(i\right)}\left(t_{\eta\left(i\right)}\right)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename wanderjoincyclic.png
	lyxscale 10
	width 50line%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Cyclic join.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename wanderjoinacyclic.png
	lyxscale 10
	width 50line%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Spanning tree of cyclic join.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Join for 
\begin_inset Formula $R_{1}\left(A,B\right)$
\end_inset

, 
\begin_inset Formula $R_{2}\left(B,C,D\right)$
\end_inset

, 
\begin_inset Formula $R_{3}\left(C,E\right)$
\end_inset

, 
\begin_inset Formula $R_{4}\left(D,F\right)$
\end_inset

, 
\begin_inset Formula $R_{5}\left(F,E\right)$
\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:wanderjoincyclic"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Note that different walk orders lead to different execution times and estimator
 variances.
 This same adjustment can be extended to work for cyclic joins by first
 computing a directed spanning tree
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A 
\shape italic
directed tree
\shape default
 is a tree in which every edge increases the distance from the root.
 A 
\shape italic
directed spanning tree
\shape default
 of a graph 
\begin_inset Formula $G$
\end_inset

 is spanning tree of 
\begin_inset Formula $G$
\end_inset

 that is also a directed tree.
\end_layout

\end_inset

 of the join query graph (see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:wanderjoincyclic"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Upper bound join
\end_layout

\begin_layout Standard
For any join 
\begin_inset Formula $J\coloneqq R_{1}\bowtie R_{2}\bowtie\cdots\bowtie R_{K}$
\end_inset

 and any 
\begin_inset Formula $t\in R_{i}$
\end_inset

 define 
\begin_inset Formula 
\[
w\left(t\right)\coloneqq\left|t\bowtie R_{i+1}\bowtie\cdots\bowtie R_{K}\right|
\]

\end_inset

with 
\begin_inset Formula $w\left(t\right)\coloneqq1$
\end_inset

 for 
\begin_inset Formula $t\in R_{K}$
\end_inset

.
 Note that every 
\begin_inset Formula $t$
\end_inset

 participates in 
\begin_inset Formula $J$
\end_inset

 proportional to 
\begin_inset Formula $w\left(t\right)$
\end_inset

.
 Thus, if we could approximate 
\begin_inset Formula $w\left(t\right)$
\end_inset

 for all 
\begin_inset Formula $t\in J$
\end_inset

 we could then produce an accurate sample of 
\begin_inset Formula $J$
\end_inset

.
 Of course, 
\begin_inset Formula $w\left(t\right)$
\end_inset

 is not often available, but we can make use of a proxy 
\begin_inset Formula $W\left(t\right)$
\end_inset

 that has properties
\begin_inset Formula 
\begin{align}
W\left(t\right)\geq w\left(t\right) & \text{ for all }t\nonumber \\
W\left(t\right)=w\left(t\right)=1 & \text{ for all }t\in R_{K}\label{eq:wproperties}\\
W\left(t\right)\geq W\left(t\rtimes R_{i+1}\right) & \text{ for all }t\in R_{i}\text{ with }i<K\nonumber 
\end{align}

\end_inset

where 
\begin_inset Formula $\rtimes$
\end_inset

 is a right semi-join
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $R_{1}\rtimes R_{2}$
\end_inset

 is the set of all tuples in 
\begin_inset Formula $R_{2}$
\end_inset

 for which there is a matching tuple in 
\begin_inset Formula $R_{1}$
\end_inset

.
\end_layout

\end_inset

.
 Given such an 
\begin_inset Formula $W\left(t\right)$
\end_inset

, we can use alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:upperboundsampling"

\end_inset

 to sample 
\begin_inset Formula $J$
\end_inset

 with replacement.
 The algorithm returns each join result 
\begin_inset Formula $t$
\end_inset

 with probability 
\begin_inset Formula $1/W\left(t\right)$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "JoinsRevisited"
literal "false"

\end_inset

 where 
\begin_inset Formula 
\[
W\left(t\right)\geq\left|R_{1}\bowtie\cdots\bowtie t\bowtie\cdots\bowtie R_{K}\right|
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Upper Bound Join
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\begin_inset Formula $R_{1},R_{2},\dots,R_{K}$
\end_inset

, 
\begin_inset Formula $W\left(t\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $t\in J$
\end_inset

 or reject
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $t\coloneqq\bot$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\begin_inset CommandInset label
LatexCommand label
name "alg:upperboundsampling"

\end_inset


\end_layout

\begin_layout LyX-Code
  for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $K$
\end_inset

:    
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $W'\coloneqq W\left(t\right)$
\end_inset

    
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $W\coloneqq W\left(t\rtimes R_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    if 
\begin_inset Formula $U\left(0,1\right)>W/W'$
\end_inset

: 
\end_layout

\begin_layout LyX-Code
      reject
\end_layout

\begin_layout LyX-Code
    // 
\begin_inset Formula $t'\rightarrow\cdots$
\end_inset

 is a lambda
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $w\left(t'\right)\coloneqq t'\rightarrow W\left(t'\right)/W\left(t\rtimes R_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t\coloneqq\mathtt{BBWR2}\left(t\rtimes R_{i},1,w\left(t'\right)\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  return 
\begin_inset Formula $t$
\end_inset


\end_layout

\end_inset

Note that employing upper bounds in this way is in effect a generalization
 of Olken sampling (see sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Olken-sample"

\end_inset

) and frequency partition sampling (see sec.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Frequency-partition-sample"

\end_inset

): in the case of frequency partition sampling 
\begin_inset Formula $W\left(t\right)\coloneqq w\left(t\right)$
\end_inset

.
 In the case of Olken sampling, let 
\begin_inset Formula $M_{i}\coloneqq\max_{v\in D_{i}}m_{i}\left(v\right)$
\end_inset

 be the maximum frequency of the join attribute 
\begin_inset Formula $A_{i}$
\end_inset

 of relation 
\begin_inset Formula $R_{i}$
\end_inset

 and for all 
\begin_inset Formula $t\in R_{i}$
\end_inset

 set
\begin_inset Formula 
\[
W\left(t\right)\coloneqq\prod_{j=i+1}^{K}M_{i}
\]

\end_inset

and then 
\begin_inset Formula $W\left(t\right)$
\end_inset

 obeys properties 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:wproperties"

\end_inset

.
 Essentially this assumes that every tuple in 
\begin_inset Formula $R_{i}$
\end_inset

 joins with 
\begin_inset Formula $M_{i+1}$
\end_inset

 tuples in 
\begin_inset Formula $R_{i+1}$
\end_inset

.
 
\end_layout

\begin_layout Standard
A tighter bound on 
\begin_inset Formula $\left|J\right|$
\end_inset

 can be constructed by considering 
\shape italic
fractional edge covers
\shape default
 of the join: the fractional edge cover of a join 
\begin_inset Formula $J$
\end_inset

 assigns a weight 
\begin_inset Formula $u_{i}\geq0$
\end_inset

 to each 
\begin_inset Formula $R_{i}$
\end_inset

, in proportion to the role 
\begin_inset Formula $R_{i}$
\end_inset

 plays in 
\begin_inset Formula $J$
\end_inset

, such that for every attribute in 
\begin_inset Formula $A_{j}$
\end_inset

 in 
\begin_inset Formula $J$
\end_inset

 we have
\begin_inset Formula 
\[
\sum_{i\in I}u_{i}\geq1
\]

\end_inset

where 
\begin_inset Formula $I=\left\{ i\mid R_{i}\left(A_{j},\dots\right)\right\} $
\end_inset

.
 For any fractional edge cover
\begin_inset Formula 
\[
\left|J\right|\le\prod_{i=1}^{K}\left|R_{i}\right|^{u_{i}}
\]

\end_inset

and a tight upper bound 
\begin_inset CommandInset citation
LatexCommand cite
key "agmbound"
literal "false"

\end_inset

 can be found by minimizing
\begin_inset Foot
status open

\begin_layout Plain Layout
In practice 
\begin_inset Formula $\sum_{i=1}^{K}u_{i}\log\left(\left|R_{i}\right|\right)$
\end_inset

.
\end_layout

\end_inset

.
 Define this tight upper bound 
\begin_inset Formula $\operatorname{AGM}$
\end_inset

 and then we can set 
\begin_inset Formula 
\[
W\left(t\right)\coloneqq\operatorname{AGM}\left(R_{i+1}\bowtie\cdots\bowtie R_{K}\right)
\]

\end_inset

for 
\begin_inset Formula $t\in R_{i}$
\end_inset

.
 
\end_layout

\begin_layout Section
Experiments
\begin_inset CommandInset label
LatexCommand label
name "sec:Experiments"

\end_inset


\end_layout

\begin_layout Standard
We conducted experiments to test how well some of the above techniques reproduce
 the distribution of a uniform sampling of 
\begin_inset Formula $J\coloneqq\left|R_{1}\bowtie R_{2}\right|$
\end_inset

.
 To do this we generate two relations such that each 
\begin_inset Formula $R_{i}$
\end_inset

 has two join attributes (with one in common) and each has 
\begin_inset Formula $\left|R_{i}\right|=n$
\end_inset

 realistic tuples.
 These tuples are realistic in the sense that they agree with Benford's
 law; they are produced by generating 
\begin_inset Formula $n$
\end_inset

 samples from a ratio of 
\begin_inset Formula $\chi_{1}^{2}$
\end_inset

 distributions 
\begin_inset CommandInset citation
LatexCommand cite
key "benfordlaw"
literal "false"

\end_inset

.
 We then 
\begin_inset Quotes eld
\end_inset

quantize
\begin_inset Quotes erd
\end_inset

 each sample to the two leading non-zero digits, thereby producing at most
 90 different valid join keys.
 Once table are materialized, we produce a benchmark sample of 
\begin_inset Formula $J$
\end_inset

 (by performing the full join).
 We then compare the distribution of the indices of the benchmark sample
 against the distribution of the indices of samples generated by each of
 the techniques using the standard Kolmogorov–Smirnov (KS) test.
 The KS test tests whether two samples are sampled from the same distribution.
 We iterate across the design space of number of tuples 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 and fraction sampled 
\begin_inset Formula $f\coloneqq0.1,\dots,0.9$
\end_inset

.
 Note that we constrain ourselves to two way joins and 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 because of the compute costs incurred in materializing the full joins for
 benchmarking; at 
\begin_inset Formula $n=10^{4}$
\end_inset

, with 
\begin_inset Formula $f=0.5$
\end_inset

, we are already constructing a join with 
\begin_inset Formula $\sim10^{7}$
\end_inset

 tuples (pushing the limit of our commodity grade compute resources).
\end_layout

\begin_layout Standard
Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Group-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wander-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Olken-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hash-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stream-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

 plot the pvalue and test statistic 
\begin_inset Formula $D$
\end_inset

 for the KS tests for each sampling fraction and relation cardinality.
 Correspondingly, figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Group-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wander-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Olken-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hash-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stream-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 plot example sample distributions for each sampling strategy for 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

.
 From the results we can see that the algorithms do not all produce uniform
 samples of the full join.
 In particular wander join and hash join produce strikingly non-uniform
 samples of the full join; this is made evident by the fact that pvalues
 reported by the KS test across all sampling fractions, by both strategies,
 are approximately zero
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The null hypothesis of the KS test is that the distributions are the same
 and hence with low pvalue we can reject that null hypothesis (i.e.
 the distributions are not the same).
\end_layout

\end_inset

 (see figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wander-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hash-join"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 This is further corroborated by the clearly skewed distributions (relative
 to 
\begin_inset Quotes eld
\end_inset

full
\begin_inset Quotes erd
\end_inset

 distribution) for 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

 (see figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wander-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hash-join-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 On the contrary stream, group, and Olken sampling all sample very nearly
 uniformly; this is made evident by the fact that pvalues reported by the
 KS test across all sampling fractions, by both strategies, are high and
 corresponding test statistics are low
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The test statistic in KS measures 
\begin_inset Formula $D=\sup_{x}\left|F_{1}(x)-F_{2}(x)\right|$
\end_inset

, the maximum difference between the empirical cumulative distributions
 of the two samples and hence, when smell, indicates convergent distributions.
\end_layout

\end_inset

.
 It is, as of yet, unclear why wander join and hash join perform poorly
 relative to stream, group, and Olken but our suspicion is that it is owing
 to an implementation bug.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{groupjoin_2_10000_50.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Distributions for 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Group-join-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{groupjoin.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KS tests for 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 and 
\begin_inset Formula $f\coloneqq0.1,\dots,0.9$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Group-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Group sample
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{wanderjoin_2_10000_50.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Sample distribution 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Wander-join-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{wanderjoin.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KS tests for 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 and 
\begin_inset Formula $f\coloneqq0.1,\dots,0.9$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Wander-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Wander join
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{olkenjoin_2_10000_50.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Sample distribution 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Olken-join-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{olkenjoin.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KS tests for 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 and 
\begin_inset Formula $f\coloneqq0.1,\dots,0.9$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Olken-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Olken sample
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{hashjoin_2_10000_50.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Sample distribution 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Hash-join-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{hashjoin.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KS tests for 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 and 
\begin_inset Formula $f\coloneqq0.1,\dots,0.9$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Hash-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Hash join
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{streamjoin_2_10000_50.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Sample distribution 
\begin_inset Formula $n=10^{4}$
\end_inset

 with 
\begin_inset Formula $f=0.5$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Stream-join-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
centering
\end_layout

\begin_layout Plain Layout

    
\backslash
begin{adjustbox}{width=
\backslash
linewidth,center}
\end_layout

\begin_layout Plain Layout

    	
\backslash
input{streamjoin.tex}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{adjustbox}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KS test for 
\begin_inset Formula $n\coloneqq10^{3},10^{4}$
\end_inset

 and 
\begin_inset Formula $f\coloneqq0.1,\dots,0.9$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Stream-join"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Stream sample
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\begin_inset CommandInset label
LatexCommand label
name "sec:Conclusion"

\end_inset


\end_layout

\begin_layout Standard
We studied the problem of commuting sampling with joins.
 In doing so we reviewed several classical sampling techniques and modern
 iterations thereof.
 Through our studies we discovered that the central challenge of successfully
 sampling through joins is performing weighted sampling according to frequencies
 of uniques values of the join attribute (in the 
\begin_inset Quotes eld
\end_inset

right
\begin_inset Quotes erd
\end_inset

 operand of the join).
 Thus, many of the techniques in the literature address themselves to either
 gathering these frequencies or building a surrogate.
 In order to further investigate the join sampling problem we implemented
 some of the studied techniques and evaluated their performance (with respect
 to sampling accuracy) on synthetic (but realistic data sets).
 We found that (with the exception of hash join and wander join) the sampling
 techniques accurately produce a uniform sampling of a join.
 In the future we intend to apply machine learning approaches to the problem,
 such as in 
\begin_inset CommandInset citation
LatexCommand cite
key "krishnan2019learning"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Appendix
\end_layout

\begin_layout Subsection
Fundamental sampling algorithms
\begin_inset CommandInset label
LatexCommand label
name "subsec:Stream-sampling-algorithms"

\end_inset


\end_layout

\begin_layout Standard
We briefly describe some fundamental sampling algorithms that will ultimately
 be employed as blackbox primitives in more sophisticated algorithms.
\end_layout

\begin_layout Subsubsection
Rejection sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Rejection-sampling"

\end_inset


\end_layout

\begin_layout Standard
Rejection sampling is a means of generating samples from some 
\shape italic
target
\shape default
 
\shape italic
distribution 
\begin_inset Formula $p(x)$
\end_inset


\shape default
 that cannot be sampled directly but for which we can construct a 
\shape italic
proposal distribution
\shape default
 
\begin_inset Formula $g(x)$
\end_inset

 that encompasses the target distribution.
 It is based on the observation that to sample 
\begin_inset Formula $p(x)$
\end_inset

, one can perform a sampling of the region under the graph
\begin_inset Foot
status open

\begin_layout Plain Layout
For probability density function 
\begin_inset Formula $p(x)$
\end_inset

, the set of ordered pairs 
\begin_inset Formula $\left\{ (x,y)\mid0\leq y\leq p(x)\right\} $
\end_inset

.
\end_layout

\end_inset

 of 
\begin_inset Formula $g(x)$
\end_inset

, and reject all samples that fall outside of the graph of 
\begin_inset Formula $p(x)$
\end_inset

.
 In the simplest case, the proposal distribution is a uniform distribution
 
\begin_inset Formula $U(a,b)\times U(0,M)$
\end_inset

, where 
\begin_inset Formula $\left[a,b\right]$
\end_inset

 is the support of 
\begin_inset Formula $p\left(x\right)$
\end_inset

 and 
\begin_inset Formula $M$
\end_inset

 is the least upper bound of 
\begin_inset Formula $p(x)$
\end_inset

.
 Then the algorithm is straightforward (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:rejectionsampling"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The number of samples until 
\begin_inset Quotes eld
\end_inset

acceptance
\begin_inset Quotes erd
\end_inset

 follows a geometric distribution with probability 
\begin_inset Formula $1/M$
\end_inset

 and thus has expected number 
\begin_inset Formula $M$
\end_inset

.
 Alternatively, more efficient algorithms exist 
\begin_inset CommandInset citation
LatexCommand cite
key "adapativereject"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Rejection Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  target distribution 
\begin_inset Formula $p\left(x\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  with support 
\begin_inset Formula $\left[a,b\right]$
\end_inset

 and max 
\begin_inset Formula $M$
\end_inset

 
\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 a draw from 
\begin_inset Formula $p$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $U_{1}\sim U(a,b)$
\end_inset

, 
\begin_inset Formula $U_{2}\sim U(0,M)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $p\left(U_{1}\right)<p\left(U_{2}\right)$
\end_inset

: // reject if outside
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $U_{1}\sim U(a,b)$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $U_{2}\sim U(0,M)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $\left(x,y\right)\coloneqq\left(U_{1},U_{2}\right)$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:rejectionsampling"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Reservoir sampling without replacement
\end_layout

\begin_layout Standard
Reservoir sampling selects a simple random sample, without replacement,
 of 
\begin_inset Formula $K$
\end_inset

 items from a population of unknown size 
\begin_inset Formula $n$
\end_inset

 in a single pass over the items.
 The simplest such algorithm maintains a 
\shape italic
reservoir 
\shape default
of size 
\begin_inset Formula $K$
\end_inset

 and swaps out elements according to the desired sampling probability.
 See alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This naive algorithm runs in 
\begin_inset Formula $O\left(n\right)$
\end_inset

 time since it calls a random number generator (RNG) for each element in
 the stream.
 
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Naive Reservoir Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: stream 
\begin_inset Formula $S$
\end_inset

, sample size 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: reservoir 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $k$
\end_inset

 samples
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

: 
\begin_inset Formula $A[i]\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

   
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  // replace elements with gradually
\end_layout

\begin_layout LyX-Code
  // decreasing probability   
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    // randomInteger is inclusive   
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $j\coloneqq$
\end_inset

 randomInteger
\begin_inset Formula $(1,i)$
\end_inset

     
\end_layout

\begin_layout LyX-Code
    if 
\begin_inset Formula $j\leq k$
\end_inset

:         
\end_layout

\begin_layout LyX-Code
       
\begin_inset Formula $A[j]\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "alg:reservoirnaive"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The naive algorithm can be improved upon by instead discarding elements
 explicitly rather than including elements explicitly.
 We describe this algorithm constructively 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/198429.198435"
literal "false"

\end_inset

:
\end_layout

\begin_layout Enumerate
We conceive of naive reservoir sampling as assigning draws 
\begin_inset Formula $u_{i}$
\end_inset

 from 
\begin_inset Formula $U\left(0,1\right)$
\end_inset

 to each entry in the 
\begin_inset Formula $S$
\end_inset

 and then selecting the bottom 
\begin_inset Formula $k$
\end_inset

 elements.
 This proceeds by initially filling the reservoir and then successively
 replacing the largest element in the reservoir if the 
\begin_inset Formula $u_{i}$
\end_inset

 associated with 
\begin_inset Formula $s_{i}$
\end_inset

 is smaller than the largest element in the reservoir.
\end_layout

\begin_layout Enumerate
If fact we don't actually need to maintain the set of draws 
\begin_inset Formula $u_{i}$
\end_inset

 for the entire reservoir, just the largest 
\begin_inset Formula $u_{i}$
\end_inset

 in the reservoir.
 Call that that value 
\begin_inset Formula $\theta$
\end_inset

.
\end_layout

\begin_layout Enumerate
The 
\begin_inset Formula $u_{i}$
\end_inset

 of the next 
\begin_inset Formula $s_{i}$
\end_inset

 to enter the reservoir is actually distributed 
\begin_inset Formula $U\left(0,\theta\right)$
\end_inset

.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $X_{i}\sim U(0,\theta)$
\end_inset

 then for 
\begin_inset Formula $Y=\max\left(X_{1},\dots,X_{k}\right)$
\end_inset

 we have 
\begin_inset Formula 
\[
P\left(Y\leq y\right)=\left(\frac{y}{\theta}\right)^{k}
\]

\end_inset

by using 
\begin_inset Formula $P\left(X_{i}\leq x\right)=x/\theta$
\end_inset

 and by 
\begin_inset Formula $X_{i}$
\end_inset

 being i.i.d.
 Therefore, by using inverse CDF 
\begin_inset Formula 
\[
U=\left(\frac{Y}{\theta}\right)^{k}\Rightarrow Y\sim\theta U^{1/k}\equiv\theta\exp\left(\frac{\log\left(U\right)}{k}\right)
\]

\end_inset


\end_layout

\begin_layout Enumerate
The number of elements 
\begin_inset Formula $K$
\end_inset

 discarded follows a geometric distribution where the probability of success
 is 
\begin_inset Formula $\theta$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Recall that the draws 
\begin_inset Formula $u_{i}$
\end_inset

 are drawn from 
\begin_inset Formula $U\left(0,1\right)$
\end_inset

 and for some 
\begin_inset Formula $s_{i}$
\end_inset

 to enter the reservoir it must be smaller than the current maximum element
 
\begin_inset Formula $\theta$
\end_inset

 and hence 
\begin_inset Formula $P\left(X\leq\theta\right)=\theta$
\end_inset

.
\end_layout

\end_inset

.
 Thus, again by using inverse CD
\begin_inset Formula 
\[
\begin{aligned}U & =1-\left(1-\theta\right)^{K+1}\Rightarrow\\
\log\left(1-U\right) & =(K+1)\log\left(1-\theta\right)\Rightarrow\\
K & =\left\lfloor \frac{\log\left(U\right)}{\log\left(1-\theta\right)}\right\rfloor 
\end{aligned}
\]

\end_inset

where we use the fact that 
\begin_inset Formula $1-U$
\end_inset

 is also distributed 
\begin_inset Formula $U\left(0,1\right)$
\end_inset

.
\end_layout

\begin_layout Enumerate
We don't actually need to compare against 
\begin_inset Formula $\theta$
\end_inset

 but just update it as a precursor to computing 
\begin_inset Formula $K$
\end_inset

.
\end_layout

\begin_layout Standard
Thus, we can more efficiently reservoir sample by taking 
\begin_inset Quotes eld
\end_inset

jumps
\begin_inset Quotes erd
\end_inset

 and only querying the RNG for included elements of the stream.
 See alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The running time then is 
\begin_inset Formula ${\displaystyle O(k(1+\log(n/k)))}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Optimal Reservoir Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: stream 
\begin_inset Formula $S$
\end_inset

, sample size 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: reservoir 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $k$
\end_inset

 samples
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\end_layout

\begin_layout LyX-Code
  // initialize the reservoir 
\end_layout

\begin_layout LyX-Code
  for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

: 
\begin_inset Formula $A[i]\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

  
\end_layout

\begin_layout LyX-Code

\series bold
Begin:
\end_layout

\begin_layout LyX-Code
  // note that 
\begin_inset Formula $\theta=1$
\end_inset

 since 
\begin_inset Formula $A$
\end_inset

 consists
\end_layout

\begin_layout LyX-Code
  // of 
\begin_inset Formula $k$
\end_inset

 samples from 
\begin_inset Formula $U\left(0,1\right)$
\end_inset

.
\end_layout

\begin_layout LyX-Code
  // 
\begin_inset Formula $\mathtt{random}()$
\end_inset

 draws from 
\begin_inset Formula $U\left(0,1\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $\theta\coloneqq$
\end_inset

 
\begin_inset Formula $\exp\left(\frac{\log\left(\mathtt{random}()\right)}{k}\right)$
\end_inset

  
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $k\coloneqq\left\lfloor \frac{\log\left(U\right)}{\log\left(1-\theta\right)}\right\rfloor $
\end_inset


\end_layout

\begin_layout LyX-Code
    // discard 
\begin_inset Formula $k$
\end_inset

 elements
\end_layout

\begin_layout LyX-Code
    while 
\begin_inset Formula $S$
\end_inset

: next
\begin_inset Formula $(S)$
\end_inset


\end_layout

\begin_layout LyX-Code
    // replace random element
\end_layout

\begin_layout LyX-Code
    // since we don't need to compare
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $A[\mathtt{randomInteger}(1,k)]\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "alg:reservoirnaive-1"

\end_inset


\end_layout

\begin_layout LyX-Code
    // update 
\begin_inset Formula $\max$
\end_inset

 given that stored 
\end_layout

\begin_layout LyX-Code
    // element was drawn from 
\begin_inset Formula $U\left(0,\theta\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $\theta\coloneqq\theta\cdot\exp\left(\frac{\log\left(U\right)}{k}\right)$
\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Unweighted streaming sampling with replacement
\begin_inset CommandInset label
LatexCommand label
name "subsec:Unweighted-streaming-sampling"

\end_inset


\end_layout

\begin_layout Standard
We present two algorithms for unweighted sequential sampling with replacement;
 we omit proofs that these algorithms in fact uniformly sample
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/304181.304206"
literal "false"

\end_inset

.
 The first algorithm 
\family typewriter
BBU1
\family default
 fills the output array with copies
\begin_inset Foot
status open

\begin_layout Plain Layout
Whose quantity depends on a random variable drawn from a binomial distribution.
\end_layout

\end_inset

 of successive tuples from streaming relation 
\begin_inset Formula $S$
\end_inset

.
 This, in effect, simulates sampling with replacement.
 The disadvantage of the alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is that the total size 
\begin_inset Formula $n$
\end_inset

 of the relation is a necessary prerequisite.
 Algorithm 
\family typewriter
BBU2
\family default
\shape italic
 
\shape default
improves on algorithm 
\family typewriter
BBU1
\family default
 by eliminating that prerequisite (see alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
BBU1
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  stream 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout LyX-Code
  sample size 
\begin_inset Formula $k$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $n\coloneqq\left|S\right|$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: array 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $k$
\end_inset

 samples
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $x\coloneqq k$
\end_inset

, 
\begin_inset Formula $i\coloneqq0$
\end_inset

 
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S$
\end_inset

 and 
\begin_inset Formula $x>0$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $X\sim B\left(x,\frac{1}{n-i}\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
    // fill 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $X$
\end_inset

 copies of 
\begin_inset Formula $t$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $X$
\end_inset

:
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $A[i+j]\coloneqq t$
\end_inset

    
\begin_inset CommandInset label
LatexCommand label
name "alg:reservoirnaive-1-1"

\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $x\coloneqq x-X$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $i\coloneqq i+1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
BBU2
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  stream 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout LyX-Code
  sample size 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: array 
\begin_inset Formula $R$
\end_inset

 with 
\begin_inset Formula $k$
\end_inset

 samples
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $N\coloneqq0$
\end_inset

, 
\begin_inset Formula $A[1,\dots,k]=0$
\end_inset

    
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

    
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $N\coloneqq N+1$
\end_inset


\end_layout

\begin_layout LyX-Code
    // set 
\begin_inset Formula $A[j]\coloneqq t$
\end_inset

 with 
\end_layout

\begin_layout LyX-Code
    // probability 
\begin_inset Formula $1/N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

:
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $X\sim U(0,1)$
\end_inset


\end_layout

\begin_layout LyX-Code
      if 
\begin_inset Formula $X\leq\frac{1}{N}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $A[j]\coloneqq t$
\end_inset

   
\begin_inset CommandInset label
LatexCommand label
name "alg:reservoirnaive-1-1-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Weighted streaming sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Weighted-streaming-sampling"

\end_inset


\end_layout

\begin_layout Standard
The precise semantics of weighted sampling are as such: given a streaming
 relation 
\begin_inset Formula $S$
\end_inset

 with cardinality 
\begin_inset Formula $n$
\end_inset

, where each tuple 
\begin_inset Formula $t\in S$
\end_inset

 has associated weight 
\begin_inset Formula $w(t)$
\end_inset

, a weighted, with replacement, sample is produced by drawing 
\begin_inset Formula $f\cdot n$
\end_inset

 tuples with probability
\begin_inset Foot
status open

\begin_layout Plain Layout
Implying normalization if 
\begin_inset Formula $\sum_{t\in S}w(t)\neq1$
\end_inset


\end_layout

\end_inset

 proportional to 
\begin_inset Formula $w(t)$
\end_inset

.
 We can extend algorithms 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 to respect these semantics; see algorithms 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1-1-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:reservoirnaive-1-1-4"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
BBWR1
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  stream 
\begin_inset Formula $S$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  sample size 
\begin_inset Formula $k$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $n\coloneqq\left|S\right|$
\end_inset


\end_layout

\begin_layout LyX-Code
  weights 
\begin_inset Formula $w(t)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: array 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $k$
\end_inset

 samples
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $x\coloneqq k$
\end_inset

, 
\begin_inset Formula $i\coloneqq0$
\end_inset

, 
\begin_inset Formula $W\coloneqq\sum_{t\in S}w(t)$
\end_inset

 
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S$
\end_inset

 and 
\begin_inset Formula $x>0$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

    
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $X\sim B\left(x,\frac{w(t)}{W-i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    // fill 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $X$
\end_inset

 copies of 
\begin_inset Formula $t$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $X$
\end_inset

:
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $A[i+j]\coloneqq t$
\end_inset

    
\begin_inset CommandInset label
LatexCommand label
name "alg:reservoirnaive-1-1-3"

\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $x\coloneqq x-X$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $i\coloneqq i+w(t)$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
BBWR2
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  stream 
\begin_inset Formula $S$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  sample size 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout LyX-Code
  weights 
\begin_inset Formula $w(t)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: array 
\begin_inset Formula $R$
\end_inset

 with 
\begin_inset Formula $k$
\end_inset

 samples
\end_layout

\begin_layout LyX-Code

\series bold
Init
\series default
: 
\begin_inset Formula $W\coloneqq0$
\end_inset

, 
\begin_inset Formula $A[1,\dots,k]\coloneqq0$
\end_inset

    
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t\coloneqq$
\end_inset

 next
\begin_inset Formula $(S)$
\end_inset

    
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $W\coloneqq W+w(t)$
\end_inset


\end_layout

\begin_layout LyX-Code
    // set 
\begin_inset Formula $A[j]\coloneqq t$
\end_inset

 with 
\end_layout

\begin_layout LyX-Code
    // probability 
\begin_inset Formula $w(t)/W$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

:
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $X\sim U(0,1)$
\end_inset


\end_layout

\begin_layout LyX-Code
      if 
\begin_inset Formula $X\leq\frac{w(t)}{W}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $A[j]\coloneqq t$
\end_inset

   
\begin_inset CommandInset label
LatexCommand label
name "alg:reservoirnaive-1-1-4"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Technique implementations
\begin_inset CommandInset label
LatexCommand label
name "subsec:Technique-implementations"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Stream Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{1}\left(A,\dots\right),R_{2}\left(A,\dots\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $k\coloneqq\left\lceil f\cdot\left|R_{1}\bowtie R_{2}\right|\right\rceil $
\end_inset

 
\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S\equiv\mathtt{SAMPLE}_{WR}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Init: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S[1,\dots,k]\coloneqq0$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $w(t)\coloneqq m_{2}\left(t.A\right)$
\end_inset

 for 
\begin_inset Formula $t\in R_{1}$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S_{1}\coloneqq$
\end_inset

 
\begin_inset Formula $\mathtt{BBWR2}\left(R_{1},k,w(t)\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{1}\coloneqq$
\end_inset

 next
\begin_inset Formula $(S_{1})$
\end_inset

   
\begin_inset CommandInset label
LatexCommand label
name "alg:streamsample"

\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{2}\sim U\left(\left\{ t\mid t\in R_{2}\wedge t.A=t_{1}.A\right\} \right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $S[i]\coloneqq\left(t_{1},t_{2}\right)$
\end_inset

  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Group Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{1}\left(A,\dots\right),R_{2}\left(A,\dots\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $k\coloneqq\left\lceil f\cdot\left|R_{1}\bowtie R_{2}\right|\right\rceil $
\end_inset

 
\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S\equiv\mathtt{SAMPLE}_{WR}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Init:
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S[1,\dots,k]\coloneqq0$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $w(t)\coloneqq m_{2}\left(t.A\right)$
\end_inset

 for 
\begin_inset Formula $t\in R_{1}$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S_{1}\coloneqq$
\end_inset

 
\begin_inset Formula $\mathtt{BlackBoxWR2}\left(R_{1},k,w(t)\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $k$
\end_inset

:  
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{1}\coloneqq S_{1}[i]$
\end_inset

   
\begin_inset CommandInset label
LatexCommand label
name "alg:groupsample"

\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{2}\coloneqq\mathtt{BlackBoxU2}\left(t_{1}\bowtie R_{2},1\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $S[i]\coloneqq\left(t_{1},t_{2}\right)$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Frequency Partition Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\begin_inset CommandInset label
LatexCommand label
name "alg:Frequency-Partition-Sample"

\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{1}\left(A,\dots\right),R_{2}\left(A,\dots\right)$
\end_inset

, 
\begin_inset Formula $A\subseteq D$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $k\coloneqq\left\lceil f\cdot\left|R_{1}\bowtie R_{2}\right|\right\rceil $
\end_inset


\end_layout

\begin_layout LyX-Code
  // low, high frequency values in 
\begin_inset Formula $R_{2}$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $D^{lo},D^{hi}$
\end_inset

 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{2}^{lo},R_{2}^{hi}\coloneqq\left.R_{2}\right|_{D^{lo}},\left.R_{2}\right|_{D^{hi}}$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $w_{2}(t)\coloneqq m_{2}\left(t.A\right)$
\end_inset

 for 
\begin_inset Formula $t\in R_{2}^{hi}$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S\equiv\mathtt{SAMPLE}_{WR}\left(R_{1}\bowtie R_{2},f\right)$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  // stream 
\begin_inset Formula $R_{1}$
\end_inset


\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $R_{1}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    // partition 
\begin_inset Formula $R_{1}$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $R_{1}^{lo}\coloneqq\left.R_{1}\right|_{D^{lo}}$
\end_inset

 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $R_{1}^{hi}\coloneqq\left.R_{1}\right|_{D^{hi}}$
\end_inset


\end_layout

\begin_layout LyX-Code
    // sample but also collect 
\end_layout

\begin_layout LyX-Code
    // stats 
\begin_inset Formula $w_{1}\left(t\right)$
\end_inset

 on 
\begin_inset Formula $R_{1}^{hi}$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $S_{1},w_{1}\left(t\right)\coloneqq$
\end_inset

 
\begin_inset Formula $\mathtt{BBWR2}\left(R_{1}^{hi},k,w(t)\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  // integrate/combine stats 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $w\left(t\right)\coloneqq w_{1}\left(t\right)\cup w_{2}\left(t\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  // from 
\begin_inset Formula $w\left(t\right)$
\end_inset

 you can approximate
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $n_{hi}\coloneqq\left|R_{1}^{hi}\bowtie R_{2}^{hi}\right|$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{1}^{*}\coloneqq S_{1}\cup R_{1}^{lo}$
\end_inset


\end_layout

\begin_layout LyX-Code
  // stream join
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $J^{*}\coloneqq R_{1}^{*}\bowtie R_{2}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $n_{lo}\coloneqq\left.J^{*}\right|_{D^{lo}}$
\end_inset

 // i.e.
 
\begin_inset Formula $n_{lo}\coloneqq\left|R_{1}^{lo}\bowtie R_{2}^{lo}\right|$
\end_inset


\end_layout

\begin_layout LyX-Code
    // partition 
\begin_inset Formula $J^{*}$
\end_inset

 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $J^{lo}\coloneqq\mathtt{BBU2}\left(\left.J^{*}\right|_{D^{lo}},k\right)$
\end_inset

 
\end_layout

\begin_layout LyX-Code
    // 
\begin_inset Formula $S_{1}\equiv\left\{ s_{i}\right\} $
\end_inset

 and just 
\end_layout

\begin_layout LyX-Code
    // like in Group-Sample
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $J^{hi}\coloneqq\mathtt{BBU2}\left(s_{i}\bowtie\left.J^{*}\right|_{D^{hi}},k\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  // # of heads and tails
\end_layout

\begin_layout LyX-Code
  // 
\begin_inset Formula $p=\frac{n_{hi}}{n_{lo}+n_{hi}},1-p=\frac{n_{lo}}{n_{lo}+n_{hi}}$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $k_{lo},k_{hi}\coloneqq B\left(k,p\right)$
\end_inset

   
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S^{lo}\coloneqq\mathtt{BlackBoxUWoR2}\left(J^{lo},k_{lo}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S^{hi}\coloneqq\mathtt{BlackBoxUWoR2}\left(J^{hi},k_{hi}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S\coloneqq S^{lo}\cup S^{hi}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count Sampling
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inputs
\series default
: 
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $R_{2}\left(A,\dots\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $S_{1}\subseteq R_{1}^{hi}$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Output
\series default
: 
\begin_inset Formula $S\equiv\left(S_{1}\bowtie R_{2}^{hi}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
Init:
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $H$
\end_inset

 // hash table for counting
\end_layout

\begin_layout LyX-Code

\series bold
Begin
\series default
:
\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S_{1}$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t\coloneqq\mathtt{next}\left(S_{1}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    // count number of tuples such that
\end_layout

\begin_layout LyX-Code
    // 
\begin_inset Formula $t.A=v$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $H[t.A]\coloneqq H[t.A]+1$
\end_inset

   
\end_layout

\begin_layout LyX-Code
  // sample 
\begin_inset Formula $S_{2}\subseteq R_{2}$
\end_inset

 such that 
\end_layout

\begin_layout LyX-Code
  // the number of tuples 
\begin_inset Formula $t$
\end_inset

 with
\end_layout

\begin_layout LyX-Code
  // 
\begin_inset Formula $t.A\equiv v$
\end_inset

 is exactly 
\begin_inset Formula $v$
\end_inset


\end_layout

\begin_layout LyX-Code
  while 
\begin_inset Formula $S_{2}\coloneqq$
\end_inset

 
\begin_inset Formula $\mathtt{BBWR2}\left(R_{2},H\right)$
\end_inset

:
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{1}\coloneqq\mathtt{next}\left(S_{2}\right)$
\end_inset

   
\begin_inset CommandInset label
LatexCommand label
name "alg:count-sample"

\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $t_{2}\coloneqq\mathtt{BlackBoxWoR}\left(t_{1}\bowtie S_{1},1\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $S[i]\coloneqq\left(t_{1},t_{2}\right)$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "biblio"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
